From 4d024b90afaeb844275d2f7feae3fde0b1eb6e0c Mon Sep 17 00:00:00 2001
From: Dmitry Gerasimov <di.gerasimov@gmail.com>
Date: Tue, 1 Nov 2022 21:58:45 +0000
Subject: [PATCH] Build java.beans as a separate module

It is not possible to build java.desktop module (which contains
java.beans package) without X11, ALSA, and CUPS. So, instead of building
whole java.desktop, just move java.beans package into a separate module.
---
 make/conf/module-loader-map.conf              |   1 +
 src/java.base/share/classes/module-info.java  |   5 +
 .../classes/com/sun/beans/TypeResolver.java   |   0
 .../classes/com/sun/beans/WeakCache.java      |   0
 .../com/sun/beans/WildcardTypeImpl.java       |   0
 .../beans/decoder/AccessorElementHandler.java |   0
 .../beans/decoder/ArrayElementHandler.java    |   0
 .../beans/decoder/BooleanElementHandler.java  |   0
 .../sun/beans/decoder/ByteElementHandler.java |   0
 .../sun/beans/decoder/CharElementHandler.java |   0
 .../beans/decoder/ClassElementHandler.java    |   0
 .../sun/beans/decoder/DocumentHandler.java    |   0
 .../beans/decoder/DoubleElementHandler.java   |   0
 .../com/sun/beans/decoder/ElementHandler.java |   0
 .../beans/decoder/FalseElementHandler.java    |   0
 .../beans/decoder/FieldElementHandler.java    |   0
 .../beans/decoder/FloatElementHandler.java    |   0
 .../sun/beans/decoder/IntElementHandler.java  |   0
 .../sun/beans/decoder/JavaElementHandler.java |   0
 .../sun/beans/decoder/LongElementHandler.java |   0
 .../beans/decoder/MethodElementHandler.java   |   0
 .../sun/beans/decoder/NewElementHandler.java  |   0
 .../sun/beans/decoder/NullElementHandler.java |   0
 .../beans/decoder/ObjectElementHandler.java   |   0
 .../beans/decoder/PropertyElementHandler.java |   0
 .../beans/decoder/ShortElementHandler.java    |   0
 .../beans/decoder/StringElementHandler.java   |   0
 .../sun/beans/decoder/TrueElementHandler.java |   0
 .../com/sun/beans/decoder/ValueObject.java    |   0
 .../sun/beans/decoder/ValueObjectImpl.java    |   0
 .../sun/beans/decoder/VarElementHandler.java  |   0
 .../sun/beans/decoder/VoidElementHandler.java |   0
 .../com/sun/beans/editors/BooleanEditor.java  |   0
 .../com/sun/beans/editors/ByteEditor.java     |   0
 .../com/sun/beans/editors/DoubleEditor.java   |   0
 .../com/sun/beans/editors/FloatEditor.java    |   0
 .../com/sun/beans/editors/IntegerEditor.java  |   0
 .../com/sun/beans/editors/LongEditor.java     |   0
 .../com/sun/beans/editors/NumberEditor.java   |   0
 .../com/sun/beans/editors/ShortEditor.java    |   0
 .../com/sun/beans/editors/StringEditor.java   |   0
 .../com/sun/beans/finder/AbstractFinder.java  |   0
 .../com/sun/beans/finder/BeanInfoFinder.java  |   0
 .../com/sun/beans/finder/ClassFinder.java     |   0
 .../sun/beans/finder/ConstructorFinder.java   |   0
 .../com/sun/beans/finder/FieldFinder.java     |   0
 .../com/sun/beans/finder/FinderUtils.java     |   0
 .../com/sun/beans/finder/InstanceFinder.java  |   0
 .../com/sun/beans/finder/MethodFinder.java    |   0
 .../finder/PersistenceDelegateFinder.java     |   0
 .../sun/beans/finder/PrimitiveTypeMap.java    |   0
 .../sun/beans/finder/PrimitiveWrapperMap.java |   0
 .../beans/finder/PropertyEditorFinder.java    |   4 -
 .../com/sun/beans/finder/Signature.java       |   0
 .../sun/beans/finder/SignatureException.java  |   0
 .../com/sun/beans/introspect/ClassInfo.java   |   0
 .../sun/beans/introspect/EventSetInfo.java    |   0
 .../com/sun/beans/introspect/MethodInfo.java  |   0
 .../sun/beans/introspect/PropertyInfo.java    |   0
 .../classes/com/sun/beans/util/Cache.java     |   0
 .../classes/java/beans/BeanDescriptor.java    |   6 -
 .../share/classes/java/beans/BeanInfo.java    |  22 -
 .../classes/java/beans/BeanProperty.java      |   0
 .../share/classes/java/beans/Beans.java       | 310 +--------
 .../classes/java/beans/ChangeListenerMap.java |   0
 .../java/beans/ConstructorProperties.java     |   0
 .../share/classes/java/beans/Customizer.java  |   0
 .../beans/DefaultPersistenceDelegate.java     |  21 -
 .../share/classes/java/beans/DesignMode.java  |   0
 .../share/classes/java/beans/Encoder.java     |   0
 .../classes/java/beans/EventHandler.java      |   0
 .../java/beans/EventSetDescriptor.java        |   0
 .../classes/java/beans/ExceptionListener.java |   0
 .../share/classes/java/beans/Expression.java  |   0
 .../classes/java/beans/FeatureDescriptor.java |   0
 .../beans/IndexedPropertyChangeEvent.java     |   0
 .../java/beans/IndexedPropertyDescriptor.java |   0
 .../java/beans/IntrospectionException.java    |   0
 .../classes/java/beans/Introspector.java      |  21 -
 .../share/classes/java/beans/JavaBean.java    |   0
 .../share/classes/java/beans/MetaData.java    | 609 ------------------
 .../classes/java/beans/MethodDescriptor.java  |   0
 .../share/classes/java/beans/MethodRef.java   |   0
 .../classes/java/beans/NameGenerator.java     |   0
 .../java/beans/ParameterDescriptor.java       |   0
 .../java/beans/PersistenceDelegate.java       |   0
 .../java/beans/PropertyChangeEvent.java       |   0
 .../java/beans/PropertyChangeListener.java    |   0
 .../beans/PropertyChangeListenerProxy.java    |   0
 .../java/beans/PropertyChangeSupport.java     |   0
 .../java/beans/PropertyDescriptor.java        |   0
 .../classes/java/beans/PropertyEditor.java    |  34 -
 .../java/beans/PropertyEditorManager.java     |   0
 .../java/beans/PropertyEditorSupport.java     |  33 -
 .../java/beans/PropertyVetoException.java     |   0
 .../classes/java/beans/SimpleBeanInfo.java    |  89 ---
 .../share/classes/java/beans/Statement.java   |   0
 .../java/beans/ThreadGroupContext.java        |   4 +-
 .../share/classes/java/beans/Transient.java   |   0
 .../java/beans/VetoableChangeListener.java    |   0
 .../beans/VetoableChangeListenerProxy.java    |   0
 .../java/beans/VetoableChangeSupport.java     |   0
 .../share/classes/java/beans/Visibility.java  |   0
 .../classes/java/beans/WeakIdentityMap.java   |   0
 .../share/classes/java/beans/XMLDecoder.java  |   0
 .../share/classes/java/beans/XMLEncoder.java  |   0
 .../java/beans/beancontext/BeanContext.java   |   0
 .../beans/beancontext/BeanContextChild.java   |   0
 .../beancontext/BeanContextChildSupport.java  |   0
 .../beans/beancontext/BeanContextEvent.java   |   0
 .../BeanContextMembershipEvent.java           |   0
 .../BeanContextMembershipListener.java        |   0
 .../beans/beancontext/BeanContextProxy.java   |   0
 .../BeanContextServiceAvailableEvent.java     |   0
 .../BeanContextServiceProvider.java           |   0
 .../BeanContextServiceProviderBeanInfo.java   |   0
 .../BeanContextServiceRevokedEvent.java       |   0
 .../BeanContextServiceRevokedListener.java    |   0
 .../beancontext/BeanContextServices.java      |   0
 .../BeanContextServicesListener.java          |   0
 .../BeanContextServicesSupport.java           |   0
 .../beans/beancontext/BeanContextSupport.java |   8 -
 .../java/beans/beancontext/package-info.java  |   0
 .../classes/java/beans/package-info.java      |   0
 src/java.beans/share/classes/module-info.java |  13 +
 .../com/sun/beans/editors/ColorEditor.java    | 232 -------
 .../com/sun/beans/editors/EnumEditor.java     | 146 -----
 .../com/sun/beans/editors/FontEditor.java     | 238 -------
 .../sun/beans/infos/ComponentBeanInfo.java    |  62 --
 .../classes/java/beans/AppletInitializer.java |  90 ---
 .../BeanContextChildComponentProxy.java       |  54 --
 .../BeanContextContainerProxy.java            |  52 --
 src/java.se/share/classes/module-info.java    |   1 +
 133 files changed, 24 insertions(+), 2031 deletions(-)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/TypeResolver.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/WeakCache.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/WildcardTypeImpl.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/AccessorElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ArrayElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/BooleanElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ByteElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/CharElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ClassElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/DocumentHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/DoubleElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/FalseElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/FieldElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/FloatElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/IntElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/JavaElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/LongElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/MethodElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/NewElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/NullElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ObjectElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/PropertyElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ShortElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/StringElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/TrueElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ValueObject.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/ValueObjectImpl.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/VarElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/decoder/VoidElementHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/BooleanEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/ByteEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/DoubleEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/FloatEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/IntegerEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/LongEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/NumberEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/ShortEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/editors/StringEditor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/AbstractFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/BeanInfoFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/ClassFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/ConstructorFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/FieldFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/FinderUtils.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/InstanceFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/MethodFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/PersistenceDelegateFinder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/PrimitiveTypeMap.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/PrimitiveWrapperMap.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/PropertyEditorFinder.java (95%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/Signature.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/finder/SignatureException.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/introspect/ClassInfo.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/introspect/EventSetInfo.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/introspect/MethodInfo.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/introspect/PropertyInfo.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/com/sun/beans/util/Cache.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/BeanDescriptor.java (93%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/BeanInfo.java (87%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/BeanProperty.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Beans.java (51%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/ChangeListenerMap.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/ConstructorProperties.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Customizer.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/DefaultPersistenceDelegate.java (94%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/DesignMode.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Encoder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/EventHandler.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/EventSetDescriptor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/ExceptionListener.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Expression.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/FeatureDescriptor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/IndexedPropertyChangeEvent.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/IndexedPropertyDescriptor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/IntrospectionException.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Introspector.java (98%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/JavaBean.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/MetaData.java (55%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/MethodDescriptor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/MethodRef.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/NameGenerator.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/ParameterDescriptor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PersistenceDelegate.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyChangeEvent.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyChangeListener.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyChangeListenerProxy.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyChangeSupport.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyDescriptor.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyEditor.java (83%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyEditorManager.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyEditorSupport.java (87%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/PropertyVetoException.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/SimpleBeanInfo.java (48%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Statement.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/ThreadGroupContext.java (96%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Transient.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/VetoableChangeListener.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/VetoableChangeListenerProxy.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/VetoableChangeSupport.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/Visibility.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/WeakIdentityMap.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/XMLDecoder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/XMLEncoder.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContext.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextChild.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextChildSupport.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextEvent.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextMembershipEvent.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextMembershipListener.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextProxy.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServiceAvailableEvent.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServiceProvider.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServiceProviderBeanInfo.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServiceRevokedEvent.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServiceRevokedListener.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServices.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServicesListener.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextServicesSupport.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/BeanContextSupport.java (99%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/beancontext/package-info.java (100%)
 rename src/{java.desktop => java.beans}/share/classes/java/beans/package-info.java (100%)
 create mode 100644 src/java.beans/share/classes/module-info.java
 delete mode 100644 src/java.desktop/share/classes/com/sun/beans/editors/ColorEditor.java
 delete mode 100644 src/java.desktop/share/classes/com/sun/beans/editors/EnumEditor.java
 delete mode 100644 src/java.desktop/share/classes/com/sun/beans/editors/FontEditor.java
 delete mode 100644 src/java.desktop/share/classes/com/sun/beans/infos/ComponentBeanInfo.java
 delete mode 100644 src/java.desktop/share/classes/java/beans/AppletInitializer.java
 delete mode 100644 src/java.desktop/share/classes/java/beans/beancontext/BeanContextChildComponentProxy.java
 delete mode 100644 src/java.desktop/share/classes/java/beans/beancontext/BeanContextContainerProxy.java

diff --git a/make/conf/module-loader-map.conf b/make/conf/module-loader-map.conf
index 234f353ae83..84e2d2bf0ff 100644
--- a/make/conf/module-loader-map.conf
+++ b/make/conf/module-loader-map.conf
@@ -32,6 +32,7 @@
 
 BOOT_MODULES= \
     java.base \
+    java.beans \
     java.datatransfer \
     java.instrument \
     java.logging \
diff --git a/src/java.base/share/classes/module-info.java b/src/java.base/share/classes/module-info.java
index 9faee9cae36..e670eab52ef 100644
--- a/src/java.base/share/classes/module-info.java
+++ b/src/java.base/share/classes/module-info.java
@@ -146,6 +146,7 @@ module java.base {
         jdk.compiler,
         jdk.jshell;
     exports jdk.internal.access to
+        java.beans,
         java.desktop,
         java.logging,
         java.management,
@@ -190,6 +191,7 @@ module java.base {
     exports jdk.internal.org.xml.sax.helpers to
         jdk.jfr;
     exports jdk.internal.misc to
+        java.beans,
         java.desktop,
         java.logging,
         java.management,
@@ -224,6 +226,7 @@ module java.base {
         jdk.management,
         jdk.jfr;
     exports jdk.internal.ref to
+        java.beans,
         java.desktop,
         jdk.incubator.foreign;
     exports jdk.internal.reflect to
@@ -287,8 +290,10 @@ module java.base {
     exports sun.reflect.annotation to
         jdk.compiler;
     exports sun.reflect.generics.reflectiveObjects to
+        java.beans,
         java.desktop;
     exports sun.reflect.misc to
+        java.beans,
         java.desktop,
         java.datatransfer,
         java.management,
diff --git a/src/java.desktop/share/classes/com/sun/beans/TypeResolver.java b/src/java.beans/share/classes/com/sun/beans/TypeResolver.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/TypeResolver.java
rename to src/java.beans/share/classes/com/sun/beans/TypeResolver.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/WeakCache.java b/src/java.beans/share/classes/com/sun/beans/WeakCache.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/WeakCache.java
rename to src/java.beans/share/classes/com/sun/beans/WeakCache.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/WildcardTypeImpl.java b/src/java.beans/share/classes/com/sun/beans/WildcardTypeImpl.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/WildcardTypeImpl.java
rename to src/java.beans/share/classes/com/sun/beans/WildcardTypeImpl.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/AccessorElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/AccessorElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/AccessorElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/AccessorElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ArrayElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/ArrayElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ArrayElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ArrayElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/BooleanElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/BooleanElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/BooleanElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/BooleanElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ByteElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/ByteElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ByteElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ByteElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/CharElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/CharElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/CharElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/CharElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ClassElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/ClassElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ClassElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ClassElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/DocumentHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/DocumentHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/DocumentHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/DocumentHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/DoubleElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/DoubleElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/DoubleElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/DoubleElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/ElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/FalseElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/FalseElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/FalseElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/FalseElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/FieldElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/FieldElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/FieldElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/FieldElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/FloatElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/FloatElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/FloatElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/FloatElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/IntElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/IntElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/IntElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/IntElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/JavaElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/JavaElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/JavaElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/JavaElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/LongElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/LongElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/LongElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/LongElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/MethodElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/MethodElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/MethodElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/MethodElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/NewElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/NewElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/NewElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/NewElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/NullElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/NullElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/NullElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/NullElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ObjectElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/ObjectElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ObjectElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ObjectElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/PropertyElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/PropertyElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/PropertyElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/PropertyElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ShortElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/ShortElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ShortElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ShortElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/StringElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/StringElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/StringElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/StringElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/TrueElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/TrueElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/TrueElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/TrueElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ValueObject.java b/src/java.beans/share/classes/com/sun/beans/decoder/ValueObject.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ValueObject.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ValueObject.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/ValueObjectImpl.java b/src/java.beans/share/classes/com/sun/beans/decoder/ValueObjectImpl.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/ValueObjectImpl.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/ValueObjectImpl.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/VarElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/VarElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/VarElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/VarElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/decoder/VoidElementHandler.java b/src/java.beans/share/classes/com/sun/beans/decoder/VoidElementHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/decoder/VoidElementHandler.java
rename to src/java.beans/share/classes/com/sun/beans/decoder/VoidElementHandler.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/BooleanEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/BooleanEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/BooleanEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/BooleanEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/ByteEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/ByteEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/ByteEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/ByteEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/DoubleEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/DoubleEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/DoubleEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/DoubleEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/FloatEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/FloatEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/FloatEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/FloatEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/IntegerEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/IntegerEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/IntegerEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/IntegerEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/LongEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/LongEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/LongEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/LongEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/NumberEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/NumberEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/NumberEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/NumberEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/ShortEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/ShortEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/ShortEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/ShortEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/StringEditor.java b/src/java.beans/share/classes/com/sun/beans/editors/StringEditor.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/editors/StringEditor.java
rename to src/java.beans/share/classes/com/sun/beans/editors/StringEditor.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/AbstractFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/AbstractFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/AbstractFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/AbstractFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/BeanInfoFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/BeanInfoFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/BeanInfoFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/BeanInfoFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/ClassFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/ClassFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/ClassFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/ClassFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/ConstructorFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/ConstructorFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/ConstructorFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/ConstructorFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/FieldFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/FieldFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/FieldFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/FieldFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/FinderUtils.java b/src/java.beans/share/classes/com/sun/beans/finder/FinderUtils.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/FinderUtils.java
rename to src/java.beans/share/classes/com/sun/beans/finder/FinderUtils.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/InstanceFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/InstanceFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/InstanceFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/InstanceFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/MethodFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/MethodFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/MethodFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/MethodFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/PersistenceDelegateFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/PersistenceDelegateFinder.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/PersistenceDelegateFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/PersistenceDelegateFinder.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/PrimitiveTypeMap.java b/src/java.beans/share/classes/com/sun/beans/finder/PrimitiveTypeMap.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/PrimitiveTypeMap.java
rename to src/java.beans/share/classes/com/sun/beans/finder/PrimitiveTypeMap.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/PrimitiveWrapperMap.java b/src/java.beans/share/classes/com/sun/beans/finder/PrimitiveWrapperMap.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/PrimitiveWrapperMap.java
rename to src/java.beans/share/classes/com/sun/beans/finder/PrimitiveWrapperMap.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/PropertyEditorFinder.java b/src/java.beans/share/classes/com/sun/beans/finder/PropertyEditorFinder.java
similarity index 95%
rename from src/java.desktop/share/classes/com/sun/beans/finder/PropertyEditorFinder.java
rename to src/java.beans/share/classes/com/sun/beans/finder/PropertyEditorFinder.java
index c4097cc0575..50e3af0b9e9 100644
--- a/src/java.desktop/share/classes/com/sun/beans/finder/PropertyEditorFinder.java
+++ b/src/java.beans/share/classes/com/sun/beans/finder/PropertyEditorFinder.java
@@ -31,7 +31,6 @@ import java.beans.PropertyEditor;
 import com.sun.beans.editors.BooleanEditor;
 import com.sun.beans.editors.ByteEditor;
 import com.sun.beans.editors.DoubleEditor;
-import com.sun.beans.editors.EnumEditor;
 import com.sun.beans.editors.FloatEditor;
 import com.sun.beans.editors.IntegerEditor;
 import com.sun.beans.editors.LongEditor;
@@ -81,9 +80,6 @@ public final class PropertyEditorFinder
         PropertyEditor editor = instantiate(predefined, null);
         if (editor == null) {
             editor = super.find(type);
-            if ((editor == null) && (null != type.getEnumConstants())) {
-                editor = new EnumEditor(type);
-            }
         }
         return editor;
     }
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/Signature.java b/src/java.beans/share/classes/com/sun/beans/finder/Signature.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/Signature.java
rename to src/java.beans/share/classes/com/sun/beans/finder/Signature.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/finder/SignatureException.java b/src/java.beans/share/classes/com/sun/beans/finder/SignatureException.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/finder/SignatureException.java
rename to src/java.beans/share/classes/com/sun/beans/finder/SignatureException.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/introspect/ClassInfo.java b/src/java.beans/share/classes/com/sun/beans/introspect/ClassInfo.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/introspect/ClassInfo.java
rename to src/java.beans/share/classes/com/sun/beans/introspect/ClassInfo.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/introspect/EventSetInfo.java b/src/java.beans/share/classes/com/sun/beans/introspect/EventSetInfo.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/introspect/EventSetInfo.java
rename to src/java.beans/share/classes/com/sun/beans/introspect/EventSetInfo.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/introspect/MethodInfo.java b/src/java.beans/share/classes/com/sun/beans/introspect/MethodInfo.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/introspect/MethodInfo.java
rename to src/java.beans/share/classes/com/sun/beans/introspect/MethodInfo.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/introspect/PropertyInfo.java b/src/java.beans/share/classes/com/sun/beans/introspect/PropertyInfo.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/introspect/PropertyInfo.java
rename to src/java.beans/share/classes/com/sun/beans/introspect/PropertyInfo.java
diff --git a/src/java.desktop/share/classes/com/sun/beans/util/Cache.java b/src/java.beans/share/classes/com/sun/beans/util/Cache.java
similarity index 100%
rename from src/java.desktop/share/classes/com/sun/beans/util/Cache.java
rename to src/java.beans/share/classes/com/sun/beans/util/Cache.java
diff --git a/src/java.desktop/share/classes/java/beans/BeanDescriptor.java b/src/java.beans/share/classes/java/beans/BeanDescriptor.java
similarity index 93%
rename from src/java.desktop/share/classes/java/beans/BeanDescriptor.java
rename to src/java.beans/share/classes/java/beans/BeanDescriptor.java
index e0428abb3b9..6fe401e1c9a 100644
--- a/src/java.desktop/share/classes/java/beans/BeanDescriptor.java
+++ b/src/java.beans/share/classes/java/beans/BeanDescriptor.java
@@ -25,7 +25,6 @@
 package java.beans;
 
 import java.lang.ref.Reference;
-import javax.swing.SwingContainer;
 
 /**
  * A BeanDescriptor provides global information about a "bean",
@@ -78,11 +77,6 @@ public class BeanDescriptor extends FeatureDescriptor {
                 setShortDescription(description);
             }
         }
-        SwingContainer container = beanClass.getAnnotation(SwingContainer.class);
-        if (container != null) {
-            setValue("isContainer", container.value());
-            setValue("containerDelegate", container.delegate());
-        }
     }
 
     /**
diff --git a/src/java.desktop/share/classes/java/beans/BeanInfo.java b/src/java.beans/share/classes/java/beans/BeanInfo.java
similarity index 87%
rename from src/java.desktop/share/classes/java/beans/BeanInfo.java
rename to src/java.beans/share/classes/java/beans/BeanInfo.java
index ed40e177c89..c8f0036c863 100644
--- a/src/java.desktop/share/classes/java/beans/BeanInfo.java
+++ b/src/java.beans/share/classes/java/beans/BeanInfo.java
@@ -25,8 +25,6 @@
 
 package java.beans;
 
-import java.awt.Image;
-
 /**
  * Use the {@code BeanInfo} interface
  * to create a {@code BeanInfo} class
@@ -136,26 +134,6 @@ public interface BeanInfo {
      */
     BeanInfo[] getAdditionalBeanInfo();
 
-    /**
-     * Returns an image that can be used to represent the bean in toolboxes or toolbars.
-     * <p>
-     * There are four possible types of icons:
-     * 16 x 16 color, 32 x 32 color, 16 x 16 mono, and 32 x 32 mono.
-     * If you implement a bean so that it supports a single icon,
-     * it is recommended to use 16 x 16 color.
-     * Another recommendation is to set a transparent background for the icons.
-     *
-     * @param  iconKind  the kind of icon requested
-     * @return           an image object representing the requested icon,
-     *                   or {@code null} if no suitable icon is available
-     *
-     * @see #ICON_COLOR_16x16
-     * @see #ICON_COLOR_32x32
-     * @see #ICON_MONO_16x16
-     * @see #ICON_MONO_32x32
-     */
-    Image getIcon(int iconKind);
-
     /**
      * Constant to indicate a 16 x 16 color icon.
      */
diff --git a/src/java.desktop/share/classes/java/beans/BeanProperty.java b/src/java.beans/share/classes/java/beans/BeanProperty.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/BeanProperty.java
rename to src/java.beans/share/classes/java/beans/BeanProperty.java
diff --git a/src/java.desktop/share/classes/java/beans/Beans.java b/src/java.beans/share/classes/java/beans/Beans.java
similarity index 51%
rename from src/java.desktop/share/classes/java/beans/Beans.java
rename to src/java.beans/share/classes/java/beans/Beans.java
index 3be687b10e5..13d08b6695b 100644
--- a/src/java.desktop/share/classes/java/beans/Beans.java
+++ b/src/java.beans/share/classes/java/beans/Beans.java
@@ -27,13 +27,6 @@ package java.beans;
 
 import com.sun.beans.finder.ClassFinder;
 
-import java.applet.Applet;
-import java.applet.AppletContext;
-import java.applet.AppletStub;
-import java.applet.AudioClip;
-
-import java.awt.Image;
-
 import java.beans.beancontext.BeanContext;
 
 import java.io.IOException;
@@ -81,7 +74,7 @@ public class Beans {
      */
 
     public static Object instantiate(ClassLoader cls, String beanName) throws IOException, ClassNotFoundException {
-        return Beans.instantiate(cls, beanName, null, null);
+        return Beans.instantiate(cls, beanName, null);
     }
 
     /**
@@ -106,73 +99,6 @@ public class Beans {
     public static Object instantiate(ClassLoader cls, String beanName,
                                      BeanContext beanContext)
             throws IOException, ClassNotFoundException {
-        return Beans.instantiate(cls, beanName, beanContext, null);
-    }
-
-    /**
-     * Instantiate a bean.
-     * <p>
-     * The bean is created based on a name relative to a class-loader.
-     * This name should be a dot-separated name such as "a.b.c".
-     * <p>
-     * In Beans 1.0 the given name can indicate either a serialized object
-     * or a class.  Other mechanisms may be added in the future.  In
-     * beans 1.0 we first try to treat the beanName as a serialized object
-     * name then as a class name.
-     * <p>
-     * When using the beanName as a serialized object name we convert the
-     * given beanName to a resource pathname and add a trailing ".ser" suffix.
-     * We then try to load a serialized object from that resource.
-     * <p>
-     * For example, given a beanName of "x.y", Beans.instantiate would first
-     * try to read a serialized object from the resource "x/y.ser" and if
-     * that failed it would try to load the class "x.y" and create an
-     * instance of that class.
-     * <p>
-     * If the bean is a subtype of java.applet.Applet, then it is given
-     * some special initialization.  First, it is supplied with a default
-     * AppletStub and AppletContext.  Second, if it was instantiated from
-     * a classname the applet's "init" method is called.  (If the bean was
-     * deserialized this step is skipped.)
-     * <p>
-     * Note that for beans which are applets, it is the caller's responsiblity
-     * to call "start" on the applet.  For correct behaviour, this should be done
-     * after the applet has been added into a visible AWT container.
-     * <p>
-     * Note that applets created via beans.instantiate run in a slightly
-     * different environment than applets running inside browsers.  In
-     * particular, bean applets have no access to "parameters", so they may
-     * wish to provide property get/set methods to set parameter values.  We
-     * advise bean-applet developers to test their bean-applets against both
-     * the JDK appletviewer (for a reference browser environment) and the
-     * BDK BeanBox (for a reference bean container).
-     *
-     * @return a JavaBean
-     * @param     cls         the class-loader from which we should create
-     *                        the bean.  If this is null, then the system
-     *                        class-loader is used.
-     * @param     beanName    the name of the bean within the class-loader.
-     *                        For example "sun.beanbox.foobah"
-     * @param     beanContext The BeanContext in which to nest the new bean
-     * @param     initializer The AppletInitializer for the new bean
-     *
-     * @exception ClassNotFoundException if the class of a serialized
-     *              object could not be found.
-     * @exception IOException if an I/O error occurs.
-     * @since 1.2
-     *
-     * @deprecated It is recommended to use
-     * {@link #instantiate(ClassLoader, String, BeanContext)},
-     * because the Applet API is deprecated. See the
-     * <a href="../../java/applet/package-summary.html"> java.applet package
-     * documentation</a> for further information.
-     */
-    @Deprecated(since = "9", forRemoval = true)
-    @SuppressWarnings("removal")
-    public static Object instantiate(ClassLoader cls, String beanName,
-                                     BeanContext beanContext,
-                                     AppletInitializer initializer)
-            throws IOException, ClassNotFoundException {
 
         InputStream ins;
         ObjectInputStream oins = null;
@@ -254,103 +180,8 @@ public class Beans {
             }
         }
 
-        if (result != null) {
-
-            // Ok, if the result is an applet initialize it.
-
-            AppletStub stub = null;
-
-            if (result instanceof Applet) {
-                Applet  applet      = (Applet) result;
-                boolean needDummies = initializer == null;
-
-                if (needDummies) {
-
-                    // Figure our the codebase and docbase URLs.  We do this
-                    // by locating the URL for a known resource, and then
-                    // massaging the URL.
-
-                    // First find the "resource name" corresponding to the bean
-                    // itself.  So a serialzied bean "a.b.c" would imply a
-                    // resource name of "a/b/c.ser" and a classname of "x.y"
-                    // would imply a resource name of "x/y.class".
-
-                    final String resourceName;
-
-                    if (serialized) {
-                        // Serialized bean
-                        resourceName = beanName.replace('.','/').concat(".ser");
-                    } else {
-                        // Regular class
-                        resourceName = beanName.replace('.','/').concat(".class");
-                    }
-
-                    URL objectUrl = null;
-                    URL codeBase  = null;
-                    URL docBase   = null;
-
-                    // Now get the URL correponding to the resource name.
-                    if (cls == null) {
-                        objectUrl = ClassLoader.getSystemResource(resourceName);
-                    } else
-                        objectUrl = cls.getResource(resourceName);
-
-                    // If we found a URL, we try to locate the docbase by taking
-                    // of the final path name component, and the code base by taking
-                    // of the complete resourceName.
-                    // So if we had a resourceName of "a/b/c.class" and we got an
-                    // objectURL of "file://bert/classes/a/b/c.class" then we would
-                    // want to set the codebase to "file://bert/classes/" and the
-                    // docbase to "file://bert/classes/a/b/"
-
-                    if (objectUrl != null) {
-                        String s = objectUrl.toExternalForm();
-
-                        if (s.endsWith(resourceName)) {
-                            int ix   = s.length() - resourceName.length();
-                            codeBase = new URL(s.substring(0,ix));
-                            docBase  = codeBase;
-
-                            ix = s.lastIndexOf('/');
-
-                            if (ix >= 0) {
-                                docBase = new URL(s.substring(0,ix+1));
-                            }
-                        }
-                    }
-
-                    // Setup a default context and stub.
-                    BeansAppletContext context = new BeansAppletContext(applet);
-
-                    stub = (AppletStub)new BeansAppletStub(applet, context, codeBase, docBase);
-                    applet.setStub(stub);
-                } else {
-                    initializer.initialize(applet, beanContext);
-                }
-
-                // now, if there is a BeanContext, add the bean, if applicable.
-
-                if (beanContext != null) {
-                    unsafeBeanContextAdd(beanContext, result);
-                }
-
-                // If it was deserialized then it was already init-ed.
-                // Otherwise we need to initialize it.
-
-                if (!serialized) {
-                    // We need to set a reasonable initial size, as many
-                    // applets are unhappy if they are started without
-                    // having been explicitly sized.
-                    applet.setSize(100,100);
-                    applet.init();
-                }
-
-                if (needDummies) {
-                  ((BeansAppletStub)stub).active = true;
-                } else initializer.activate(applet);
-
-            } else if (beanContext != null) unsafeBeanContextAdd(beanContext, result);
-        }
+        if (result != null && beanContext != null)
+            unsafeBeanContextAdd(beanContext, result);
 
         return result;
     }
@@ -514,138 +345,3 @@ class ObjectInputStreamWithLoader extends ObjectInputStream
         return ClassFinder.resolveClass(cname, this.loader);
     }
 }
-
-/**
- * Package private support class.  This provides a default AppletContext
- * for beans which are applets.
- */
-@Deprecated(since = "9", forRemoval = true)
-@SuppressWarnings("removal")
-class BeansAppletContext implements AppletContext {
-    Applet target;
-    Hashtable<URL,Object> imageCache = new Hashtable<>();
-
-    BeansAppletContext(Applet target) {
-        this.target = target;
-    }
-
-    public AudioClip getAudioClip(URL url) {
-        // We don't currently support audio clips in the Beans.instantiate
-        // applet context, unless by some luck there exists a URL content
-        // class that can generate an AudioClip from the audio URL.
-        try {
-            return (AudioClip) url.getContent();
-        } catch (Exception ex) {
-            return null;
-        }
-    }
-
-    public synchronized Image getImage(URL url) {
-        Object o = imageCache.get(url);
-        if (o != null) {
-            return (Image)o;
-        }
-        try {
-            o = url.getContent();
-            if (o == null) {
-                return null;
-            }
-            if (o instanceof Image) {
-                imageCache.put(url, o);
-                return (Image) o;
-            }
-            // Otherwise it must be an ImageProducer.
-            Image img = target.createImage((java.awt.image.ImageProducer)o);
-            imageCache.put(url, img);
-            return img;
-
-        } catch (Exception ex) {
-            return null;
-        }
-    }
-
-    public Applet getApplet(String name) {
-        return null;
-    }
-
-    public Enumeration<Applet> getApplets() {
-        Vector<Applet> applets = new Vector<>();
-        applets.addElement(target);
-        return applets.elements();
-    }
-
-    public void showDocument(URL url) {
-        // We do nothing.
-    }
-
-    public void showDocument(URL url, String target) {
-        // We do nothing.
-    }
-
-    public void showStatus(String status) {
-        // We do nothing.
-    }
-
-    public void setStream(String key, InputStream stream)throws IOException{
-        // We do nothing.
-    }
-
-    public InputStream getStream(String key){
-        // We do nothing.
-        return null;
-    }
-
-    public Iterator<String> getStreamKeys(){
-        // We do nothing.
-        return null;
-    }
-}
-
-/**
- * Package private support class.  This provides an AppletStub
- * for beans which are applets.
- */
-@Deprecated(since = "9", forRemoval = true)
-@SuppressWarnings("removal")
-class BeansAppletStub implements AppletStub {
-    transient boolean active;
-    transient Applet target;
-    transient AppletContext context;
-    transient URL codeBase;
-    transient URL docBase;
-
-    BeansAppletStub(Applet target,
-                AppletContext context, URL codeBase,
-                                URL docBase) {
-        this.target = target;
-        this.context = context;
-        this.codeBase = codeBase;
-        this.docBase = docBase;
-    }
-
-    public boolean isActive() {
-        return active;
-    }
-
-    public URL getDocumentBase() {
-        // use the root directory of the applet's class-loader
-        return docBase;
-    }
-
-    public URL getCodeBase() {
-        // use the directory where we found the class or serialized object.
-        return codeBase;
-    }
-
-    public String getParameter(String name) {
-        return null;
-    }
-
-    public AppletContext getAppletContext() {
-        return context;
-    }
-
-    public void appletResize(int width, int height) {
-        // we do nothing.
-    }
-}
diff --git a/src/java.desktop/share/classes/java/beans/ChangeListenerMap.java b/src/java.beans/share/classes/java/beans/ChangeListenerMap.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/ChangeListenerMap.java
rename to src/java.beans/share/classes/java/beans/ChangeListenerMap.java
diff --git a/src/java.desktop/share/classes/java/beans/ConstructorProperties.java b/src/java.beans/share/classes/java/beans/ConstructorProperties.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/ConstructorProperties.java
rename to src/java.beans/share/classes/java/beans/ConstructorProperties.java
diff --git a/src/java.desktop/share/classes/java/beans/Customizer.java b/src/java.beans/share/classes/java/beans/Customizer.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/Customizer.java
rename to src/java.beans/share/classes/java/beans/Customizer.java
diff --git a/src/java.desktop/share/classes/java/beans/DefaultPersistenceDelegate.java b/src/java.beans/share/classes/java/beans/DefaultPersistenceDelegate.java
similarity index 94%
rename from src/java.desktop/share/classes/java/beans/DefaultPersistenceDelegate.java
rename to src/java.beans/share/classes/java/beans/DefaultPersistenceDelegate.java
index 42e73c70b48..7043c50e631 100644
--- a/src/java.desktop/share/classes/java/beans/DefaultPersistenceDelegate.java
+++ b/src/java.beans/share/classes/java/beans/DefaultPersistenceDelegate.java
@@ -286,9 +286,6 @@ public class DefaultPersistenceDelegate extends PersistenceDelegate {
         special cases so as to provide reliable persistence of listeners
         for the general case.
         */
-        if (!java.awt.Component.class.isAssignableFrom(type)) {
-            return; // Just handle the listeners of Components for now.
-        }
         for (EventSetDescriptor d : info.getEventSetDescriptors()) {
             if (d.isTransient()) {
                 continue;
@@ -296,24 +293,6 @@ public class DefaultPersistenceDelegate extends PersistenceDelegate {
             Class<?> listenerType = d.getListenerType();
 
 
-            // The ComponentListener is added automatically, when
-            // Contatiner:add is called on the parent.
-            if (listenerType == java.awt.event.ComponentListener.class) {
-                continue;
-            }
-
-            // JMenuItems have a change listener added to them in
-            // their "add" methods to enable accessibility support -
-            // see the add method in JMenuItem for details. We cannot
-            // instantiate this instance as it is a private inner class
-            // and do not need to do this anyway since it will be created
-            // and installed by the "add" method. Special case this for now,
-            // ignoring all change listeners on JMenuItems.
-            if (listenerType == javax.swing.event.ChangeListener.class &&
-                type == javax.swing.JMenuItem.class) {
-                continue;
-            }
-
             EventListener[] oldL = new EventListener[0];
             EventListener[] newL = new EventListener[0];
             try {
diff --git a/src/java.desktop/share/classes/java/beans/DesignMode.java b/src/java.beans/share/classes/java/beans/DesignMode.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/DesignMode.java
rename to src/java.beans/share/classes/java/beans/DesignMode.java
diff --git a/src/java.desktop/share/classes/java/beans/Encoder.java b/src/java.beans/share/classes/java/beans/Encoder.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/Encoder.java
rename to src/java.beans/share/classes/java/beans/Encoder.java
diff --git a/src/java.desktop/share/classes/java/beans/EventHandler.java b/src/java.beans/share/classes/java/beans/EventHandler.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/EventHandler.java
rename to src/java.beans/share/classes/java/beans/EventHandler.java
diff --git a/src/java.desktop/share/classes/java/beans/EventSetDescriptor.java b/src/java.beans/share/classes/java/beans/EventSetDescriptor.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/EventSetDescriptor.java
rename to src/java.beans/share/classes/java/beans/EventSetDescriptor.java
diff --git a/src/java.desktop/share/classes/java/beans/ExceptionListener.java b/src/java.beans/share/classes/java/beans/ExceptionListener.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/ExceptionListener.java
rename to src/java.beans/share/classes/java/beans/ExceptionListener.java
diff --git a/src/java.desktop/share/classes/java/beans/Expression.java b/src/java.beans/share/classes/java/beans/Expression.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/Expression.java
rename to src/java.beans/share/classes/java/beans/Expression.java
diff --git a/src/java.desktop/share/classes/java/beans/FeatureDescriptor.java b/src/java.beans/share/classes/java/beans/FeatureDescriptor.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/FeatureDescriptor.java
rename to src/java.beans/share/classes/java/beans/FeatureDescriptor.java
diff --git a/src/java.desktop/share/classes/java/beans/IndexedPropertyChangeEvent.java b/src/java.beans/share/classes/java/beans/IndexedPropertyChangeEvent.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/IndexedPropertyChangeEvent.java
rename to src/java.beans/share/classes/java/beans/IndexedPropertyChangeEvent.java
diff --git a/src/java.desktop/share/classes/java/beans/IndexedPropertyDescriptor.java b/src/java.beans/share/classes/java/beans/IndexedPropertyDescriptor.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/IndexedPropertyDescriptor.java
rename to src/java.beans/share/classes/java/beans/IndexedPropertyDescriptor.java
diff --git a/src/java.desktop/share/classes/java/beans/IntrospectionException.java b/src/java.beans/share/classes/java/beans/IntrospectionException.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/IntrospectionException.java
rename to src/java.beans/share/classes/java/beans/IntrospectionException.java
diff --git a/src/java.desktop/share/classes/java/beans/Introspector.java b/src/java.beans/share/classes/java/beans/Introspector.java
similarity index 98%
rename from src/java.desktop/share/classes/java/beans/Introspector.java
rename to src/java.beans/share/classes/java/beans/Introspector.java
index f73444a54ef..33722cea7a2 100644
--- a/src/java.desktop/share/classes/java/beans/Introspector.java
+++ b/src/java.beans/share/classes/java/beans/Introspector.java
@@ -25,7 +25,6 @@
 
 package java.beans;
 
-import java.awt.Component;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
 import java.lang.reflect.Constructor;
@@ -1120,18 +1119,6 @@ public class Introspector {
     }
 
     private static Class<?> findCustomizerClass(Class<?> type) {
-        String name = type.getName() + "Customizer";
-        try {
-            type = ClassFinder.findClass(name, type.getClassLoader());
-            // Each customizer should inherit java.awt.Component and implement java.beans.Customizer
-            // according to the section 9.3 of JavaBeans specification
-            if (Component.class.isAssignableFrom(type) && Customizer.class.isAssignableFrom(type)) {
-                return type;
-            }
-        }
-        catch (Exception exception) {
-            // ignore any exceptions
-        }
         return null;
     }
 
@@ -1372,14 +1359,6 @@ class GenericBeanInfo extends SimpleBeanInfo {
         return beanDescriptor;
     }
 
-    public java.awt.Image getIcon(int iconKind) {
-        BeanInfo targetBeanInfo = getTargetBeanInfo();
-        if (targetBeanInfo != null) {
-            return targetBeanInfo.getIcon(iconKind);
-        }
-        return super.getIcon(iconKind);
-    }
-
     private BeanInfo getTargetBeanInfo() {
         if (this.targetBeanInfoRef == null) {
             return null;
diff --git a/src/java.desktop/share/classes/java/beans/JavaBean.java b/src/java.beans/share/classes/java/beans/JavaBean.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/JavaBean.java
rename to src/java.beans/share/classes/java/beans/JavaBean.java
diff --git a/src/java.desktop/share/classes/java/beans/MetaData.java b/src/java.beans/share/classes/java/beans/MetaData.java
similarity index 55%
rename from src/java.desktop/share/classes/java/beans/MetaData.java
rename to src/java.beans/share/classes/java/beans/MetaData.java
index e2dbb6ff66f..2fe4faa21f7 100644
--- a/src/java.desktop/share/classes/java/beans/MetaData.java
+++ b/src/java.beans/share/classes/java/beans/MetaData.java
@@ -26,18 +26,6 @@ package java.beans;
 
 import com.sun.beans.finder.PrimitiveWrapperMap;
 
-import java.awt.AWTKeyStroke;
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.Color;
-import java.awt.Font;
-import java.awt.GridBagConstraints;
-import java.awt.Insets;
-import java.awt.Point;
-import java.awt.Rectangle;
-import java.awt.event.KeyEvent;
-import java.awt.font.TextAttribute;
-
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
@@ -50,13 +38,6 @@ import java.security.PrivilegedAction;
 
 import java.util.*;
 
-import javax.swing.Box;
-import javax.swing.JLayeredPane;
-import javax.swing.border.MatteBorder;
-import javax.swing.plaf.ColorUIResource;
-
-import sun.swing.PrintColorUIResource;
-
 import static sun.reflect.misc.ReflectUtil.isPackageAccessible;
 
 /*
@@ -610,584 +591,6 @@ static final class java_util_Hashtable_PersistenceDelegate extends java_util_Map
 // Beans
 static final class java_beans_beancontext_BeanContextSupport_PersistenceDelegate extends java_util_Collection_PersistenceDelegate {}
 
-// AWT
-
-/**
- * The persistence delegate for {@link Insets}.
- * It is impossible to use {@link DefaultPersistenceDelegate}
- * because this class does not have any properties.
- *
- * @author Sergey A. Malenkov
- */
-static final class java_awt_Insets_PersistenceDelegate extends PersistenceDelegate {
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return oldInstance.equals(newInstance);
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        Insets insets = (Insets) oldInstance;
-        Object[] args = new Object[] {
-                insets.top,
-                insets.left,
-                insets.bottom,
-                insets.right,
-        };
-        return new Expression(insets, insets.getClass(), "new", args);
-    }
-}
-
-/**
- * The persistence delegate for {@link Font}.
- * It is impossible to use {@link DefaultPersistenceDelegate}
- * because size of the font can be float value.
- *
- * @author Sergey A. Malenkov
- */
-static final class java_awt_Font_PersistenceDelegate extends PersistenceDelegate {
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return oldInstance.equals(newInstance);
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        Font font = (Font) oldInstance;
-
-        int count = 0;
-        String family = null;
-        int style = Font.PLAIN;
-        int size = 12;
-
-        Map<TextAttribute, ?> basic = font.getAttributes();
-        Map<TextAttribute, Object> clone = new HashMap<>(basic.size());
-        for (TextAttribute key : basic.keySet()) {
-            Object value = basic.get(key);
-            if (value != null) {
-                clone.put(key, value);
-            }
-            if (key == TextAttribute.FAMILY) {
-                if (value instanceof String) {
-                    count++;
-                    family = (String) value;
-                }
-            }
-            else if (key == TextAttribute.WEIGHT) {
-                if (TextAttribute.WEIGHT_REGULAR.equals(value)) {
-                    count++;
-                } else if (TextAttribute.WEIGHT_BOLD.equals(value)) {
-                    count++;
-                    style |= Font.BOLD;
-                }
-            }
-            else if (key == TextAttribute.POSTURE) {
-                if (TextAttribute.POSTURE_REGULAR.equals(value)) {
-                    count++;
-                } else if (TextAttribute.POSTURE_OBLIQUE.equals(value)) {
-                    count++;
-                    style |= Font.ITALIC;
-                }
-            } else if (key == TextAttribute.SIZE) {
-                if (value instanceof Number) {
-                    Number number = (Number) value;
-                    size = number.intValue();
-                    if (size == number.floatValue()) {
-                        count++;
-                    }
-                }
-            }
-        }
-        Class<?> type = font.getClass();
-        if (count == clone.size()) {
-            return new Expression(font, type, "new", new Object[]{family, style, size});
-        }
-        if (type == Font.class) {
-            return new Expression(font, type, "getFont", new Object[]{clone});
-        }
-        return new Expression(font, type, "new", new Object[]{Font.getFont(clone)});
-    }
-}
-
-/**
- * The persistence delegate for {@link AWTKeyStroke}.
- * It is impossible to use {@link DefaultPersistenceDelegate}
- * because this class have no public constructor.
- *
- * @author Sergey A. Malenkov
- */
-static final class java_awt_AWTKeyStroke_PersistenceDelegate extends PersistenceDelegate {
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return oldInstance.equals(newInstance);
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        AWTKeyStroke key = (AWTKeyStroke) oldInstance;
-
-        char ch = key.getKeyChar();
-        int code = key.getKeyCode();
-        int mask = key.getModifiers();
-        boolean onKeyRelease = key.isOnKeyRelease();
-
-        Object[] args = null;
-        if (ch == KeyEvent.CHAR_UNDEFINED) {
-            args = !onKeyRelease
-                    ? new Object[]{code, mask}
-                    : new Object[]{code, mask, onKeyRelease};
-        } else if (code == KeyEvent.VK_UNDEFINED) {
-            if (!onKeyRelease) {
-                args = (mask == 0)
-                        ? new Object[]{ch}
-                        : new Object[]{ch, mask};
-            } else if (mask == 0) {
-                args = new Object[]{ch, onKeyRelease};
-            }
-        }
-        if (args == null) {
-            throw new IllegalStateException("Unsupported KeyStroke: " + key);
-        }
-        Class<?> type = key.getClass();
-        String name = type.getName();
-        // get short name of the class
-        int index = name.lastIndexOf('.') + 1;
-        if (index > 0) {
-            name = name.substring(index);
-        }
-        return new Expression( key, type, "get" + name, args );
-    }
-}
-
-static class StaticFieldsPersistenceDelegate extends PersistenceDelegate {
-    protected void installFields(Encoder out, Class<?> cls) {
-        if (Modifier.isPublic(cls.getModifiers()) && isPackageAccessible(cls)) {
-            Field[] fields = cls.getFields();
-            for(int i = 0; i < fields.length; i++) {
-                Field field = fields[i];
-                // Don't install primitives, their identity will not be preserved
-                // by wrapping.
-                if (Object.class.isAssignableFrom(field.getType())) {
-                    out.writeExpression(new Expression(field, "get", new Object[]{null}));
-                }
-            }
-        }
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        throw new RuntimeException("Unrecognized instance: " + oldInstance);
-    }
-
-    public void writeObject(Object oldInstance, Encoder out) {
-        if (out.getAttribute(this) == null) {
-            out.setAttribute(this, Boolean.TRUE);
-            installFields(out, oldInstance.getClass());
-        }
-        super.writeObject(oldInstance, out);
-    }
-}
-
-// SystemColor
-static final class java_awt_SystemColor_PersistenceDelegate extends StaticFieldsPersistenceDelegate {}
-
-// TextAttribute
-static final class java_awt_font_TextAttribute_PersistenceDelegate extends StaticFieldsPersistenceDelegate {}
-
-// MenuShortcut
-static final class java_awt_MenuShortcut_PersistenceDelegate extends PersistenceDelegate {
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return oldInstance.equals(newInstance);
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        java.awt.MenuShortcut m = (java.awt.MenuShortcut)oldInstance;
-        return new Expression(oldInstance, m.getClass(), "new",
-                   new Object[]{m.getKey(), Boolean.valueOf(m.usesShiftModifier())});
-    }
-}
-
-// Component
-static final class java_awt_Component_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        java.awt.Component c = (java.awt.Component)oldInstance;
-        java.awt.Component c2 = (java.awt.Component)newInstance;
-        // The "background", "foreground" and "font" properties.
-        // The foreground and font properties of Windows change from
-        // null to defined values after the Windows are made visible -
-        // special case them for now.
-        if (!(oldInstance instanceof java.awt.Window)) {
-            Object oldBackground = c.isBackgroundSet() ? c.getBackground() : null;
-            Object newBackground = c2.isBackgroundSet() ? c2.getBackground() : null;
-            if (!Objects.equals(oldBackground, newBackground)) {
-                invokeStatement(oldInstance, "setBackground", new Object[] { oldBackground }, out);
-            }
-            Object oldForeground = c.isForegroundSet() ? c.getForeground() : null;
-            Object newForeground = c2.isForegroundSet() ? c2.getForeground() : null;
-            if (!Objects.equals(oldForeground, newForeground)) {
-                invokeStatement(oldInstance, "setForeground", new Object[] { oldForeground }, out);
-            }
-            Object oldFont = c.isFontSet() ? c.getFont() : null;
-            Object newFont = c2.isFontSet() ? c2.getFont() : null;
-            if (!Objects.equals(oldFont, newFont)) {
-                invokeStatement(oldInstance, "setFont", new Object[] { oldFont }, out);
-            }
-        }
-
-        // Bounds
-        java.awt.Container p = c.getParent();
-        if (p == null || p.getLayout() == null) {
-            // Use the most concise construct.
-            boolean locationCorrect = c.getLocation().equals(c2.getLocation());
-            boolean sizeCorrect = c.getSize().equals(c2.getSize());
-            if (!locationCorrect && !sizeCorrect) {
-                invokeStatement(oldInstance, "setBounds", new Object[]{c.getBounds()}, out);
-            }
-            else if (!locationCorrect) {
-                invokeStatement(oldInstance, "setLocation", new Object[]{c.getLocation()}, out);
-            }
-            else if (!sizeCorrect) {
-                invokeStatement(oldInstance, "setSize", new Object[]{c.getSize()}, out);
-            }
-        }
-    }
-}
-
-// Container
-static final class java_awt_Container_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        // Ignore the children of a JScrollPane.
-        // Pending(milne) find a better way to do this.
-        if (oldInstance instanceof javax.swing.JScrollPane) {
-            return;
-        }
-        java.awt.Container oldC = (java.awt.Container)oldInstance;
-        java.awt.Component[] oldChildren = oldC.getComponents();
-        java.awt.Container newC = (java.awt.Container)newInstance;
-        java.awt.Component[] newChildren = (newC == null) ? new java.awt.Component[0] : newC.getComponents();
-
-        BorderLayout layout = ( oldC.getLayout() instanceof BorderLayout )
-                ? ( BorderLayout )oldC.getLayout()
-                : null;
-
-        JLayeredPane oldLayeredPane = (oldInstance instanceof JLayeredPane)
-                ? (JLayeredPane) oldInstance
-                : null;
-
-        // Pending. Assume all the new children are unaltered.
-        for(int i = newChildren.length; i < oldChildren.length; i++) {
-            Object[] args = ( layout != null )
-                    ? new Object[] {oldChildren[i], layout.getConstraints( oldChildren[i] )}
-                    : (oldLayeredPane != null)
-                            ? new Object[] {oldChildren[i], oldLayeredPane.getLayer(oldChildren[i]), Integer.valueOf(-1)}
-                            : new Object[] {oldChildren[i]};
-
-            invokeStatement(oldInstance, "add", args, out);
-        }
-    }
-}
-
-// Choice
-static final class java_awt_Choice_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        java.awt.Choice m = (java.awt.Choice)oldInstance;
-        java.awt.Choice n = (java.awt.Choice)newInstance;
-        for (int i = n.getItemCount(); i < m.getItemCount(); i++) {
-            invokeStatement(oldInstance, "add", new Object[]{m.getItem(i)}, out);
-        }
-    }
-}
-
-// Menu
-static final class java_awt_Menu_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        java.awt.Menu m = (java.awt.Menu)oldInstance;
-        java.awt.Menu n = (java.awt.Menu)newInstance;
-        for (int i = n.getItemCount(); i < m.getItemCount(); i++) {
-            invokeStatement(oldInstance, "add", new Object[]{m.getItem(i)}, out);
-        }
-    }
-}
-
-// MenuBar
-static final class java_awt_MenuBar_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        java.awt.MenuBar m = (java.awt.MenuBar)oldInstance;
-        java.awt.MenuBar n = (java.awt.MenuBar)newInstance;
-        for (int i = n.getMenuCount(); i < m.getMenuCount(); i++) {
-            invokeStatement(oldInstance, "add", new Object[]{m.getMenu(i)}, out);
-        }
-    }
-}
-
-// List
-static final class java_awt_List_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        java.awt.List m = (java.awt.List)oldInstance;
-        java.awt.List n = (java.awt.List)newInstance;
-        for (int i = n.getItemCount(); i < m.getItemCount(); i++) {
-            invokeStatement(oldInstance, "add", new Object[]{m.getItem(i)}, out);
-        }
-    }
-}
-
-
-// LayoutManagers
-
-// BorderLayout
-static final class java_awt_BorderLayout_PersistenceDelegate extends DefaultPersistenceDelegate {
-    private static final String[] CONSTRAINTS = {
-            BorderLayout.NORTH,
-            BorderLayout.SOUTH,
-            BorderLayout.EAST,
-            BorderLayout.WEST,
-            BorderLayout.CENTER,
-            BorderLayout.PAGE_START,
-            BorderLayout.PAGE_END,
-            BorderLayout.LINE_START,
-            BorderLayout.LINE_END,
-    };
-    @Override
-    protected void initialize(Class<?> type, Object oldInstance,
-                              Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        BorderLayout oldLayout = (BorderLayout) oldInstance;
-        BorderLayout newLayout = (BorderLayout) newInstance;
-        for (String constraints : CONSTRAINTS) {
-            Object oldC = oldLayout.getLayoutComponent(constraints);
-            Object newC = newLayout.getLayoutComponent(constraints);
-            // Pending, assume any existing elements are OK.
-            if (oldC != null && newC == null) {
-                invokeStatement(oldInstance, "addLayoutComponent",
-                                new Object[] { oldC, constraints }, out);
-            }
-        }
-    }
-}
-
-// CardLayout
-static final class java_awt_CardLayout_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance,
-                              Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        if (getVector(newInstance).isEmpty()) {
-            for (Object card : getVector(oldInstance)) {
-                Object[] args = {MetaData.getPrivateFieldValue(card, "java.awt.CardLayout$Card.name"),
-                                 MetaData.getPrivateFieldValue(card, "java.awt.CardLayout$Card.comp")};
-                invokeStatement(oldInstance, "addLayoutComponent", args, out);
-            }
-        }
-    }
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return super.mutatesTo(oldInstance, newInstance) && getVector(newInstance).isEmpty();
-    }
-    private static Vector<?> getVector(Object instance) {
-        return (Vector<?>) MetaData.getPrivateFieldValue(instance, "java.awt.CardLayout.vector");
-    }
-}
-
-// GridBagLayout
-static final class java_awt_GridBagLayout_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance,
-                              Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        if (getHashtable(newInstance).isEmpty()) {
-            for (Map.Entry<?,?> entry : getHashtable(oldInstance).entrySet()) {
-                Object[] args = {entry.getKey(), entry.getValue()};
-                invokeStatement(oldInstance, "addLayoutComponent", args, out);
-            }
-        }
-    }
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return super.mutatesTo(oldInstance, newInstance) && getHashtable(newInstance).isEmpty();
-    }
-    private static Hashtable<?,?> getHashtable(Object instance) {
-        return (Hashtable<?,?>) MetaData.getPrivateFieldValue(instance, "java.awt.GridBagLayout.comptable");
-    }
-}
-
-// Swing
-
-// JFrame (If we do this for Window instead of JFrame, the setVisible call
-// will be issued before we have added all the children to the JFrame and
-// will appear blank).
-static final class javax_swing_JFrame_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        java.awt.Window oldC = (java.awt.Window)oldInstance;
-        java.awt.Window newC = (java.awt.Window)newInstance;
-        boolean oldV = oldC.isVisible();
-        boolean newV = newC.isVisible();
-        if (newV != oldV) {
-            // false means: don't execute this statement at write time.
-            boolean executeStatements = out.executeStatements;
-            out.executeStatements = false;
-            invokeStatement(oldInstance, "setVisible", new Object[]{Boolean.valueOf(oldV)}, out);
-            out.executeStatements = executeStatements;
-        }
-    }
-}
-
-// Models
-
-// DefaultListModel
-static final class javax_swing_DefaultListModel_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        // Note, the "size" property will be set here.
-        super.initialize(type, oldInstance, newInstance, out);
-        javax.swing.DefaultListModel<?> m = (javax.swing.DefaultListModel<?>)oldInstance;
-        javax.swing.DefaultListModel<?> n = (javax.swing.DefaultListModel<?>)newInstance;
-        for (int i = n.getSize(); i < m.getSize(); i++) {
-            invokeStatement(oldInstance, "add", // Can also use "addElement".
-                    new Object[]{m.getElementAt(i)}, out);
-        }
-    }
-}
-
-// DefaultComboBoxModel
-static final class javax_swing_DefaultComboBoxModel_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        javax.swing.DefaultComboBoxModel<?> m = (javax.swing.DefaultComboBoxModel<?>)oldInstance;
-        for (int i = 0; i < m.getSize(); i++) {
-            invokeStatement(oldInstance, "addElement", new Object[]{m.getElementAt(i)}, out);
-        }
-    }
-}
-
-
-// DefaultMutableTreeNode
-static final class javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object
-                              newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        javax.swing.tree.DefaultMutableTreeNode m =
-            (javax.swing.tree.DefaultMutableTreeNode)oldInstance;
-        javax.swing.tree.DefaultMutableTreeNode n =
-            (javax.swing.tree.DefaultMutableTreeNode)newInstance;
-        for (int i = n.getChildCount(); i < m.getChildCount(); i++) {
-            invokeStatement(oldInstance, "add", new
-                Object[]{m.getChildAt(i)}, out);
-        }
-    }
-}
-
-// ToolTipManager
-static final class javax_swing_ToolTipManager_PersistenceDelegate extends PersistenceDelegate {
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        return new Expression(oldInstance, javax.swing.ToolTipManager.class,
-                              "sharedInstance", new Object[]{});
-    }
-}
-
-// JTabbedPane
-static final class javax_swing_JTabbedPane_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        javax.swing.JTabbedPane p = (javax.swing.JTabbedPane)oldInstance;
-        for (int i = 0; i < p.getTabCount(); i++) {
-            invokeStatement(oldInstance, "addTab",
-                                          new Object[]{
-                                              p.getTitleAt(i),
-                                              p.getIconAt(i),
-                                              p.getComponentAt(i)}, out);
-        }
-    }
-}
-
-// Box
-static final class javax_swing_Box_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return super.mutatesTo(oldInstance, newInstance) && getAxis(oldInstance).equals(getAxis(newInstance));
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        return new Expression(oldInstance, oldInstance.getClass(), "new", new Object[] {getAxis(oldInstance)});
-    }
-
-    private Integer getAxis(Object object) {
-        Box box = (Box) object;
-        return (Integer) MetaData.getPrivateFieldValue(box.getLayout(), "javax.swing.BoxLayout.axis");
-    }
-}
-
-// JMenu
-// Note that we do not need to state the initialiser for
-// JMenuItems since the getComponents() method defined in
-// Container will return all of the sub menu items that
-// need to be added to the menu item.
-// Not so for JMenu apparently.
-static final class javax_swing_JMenu_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        javax.swing.JMenu m = (javax.swing.JMenu)oldInstance;
-        java.awt.Component[] c = m.getMenuComponents();
-        for (int i = 0; i < c.length; i++) {
-            invokeStatement(oldInstance, "add", new Object[]{c[i]}, out);
-        }
-    }
-}
-
-/**
- * The persistence delegate for {@link MatteBorder}.
- * It is impossible to use {@link DefaultPersistenceDelegate}
- * because this class does not have writable properties.
- *
- * @author Sergey A. Malenkov
- */
-static final class javax_swing_border_MatteBorder_PersistenceDelegate extends PersistenceDelegate {
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        MatteBorder border = (MatteBorder) oldInstance;
-        Insets insets = border.getBorderInsets();
-        Object object = border.getTileIcon();
-        if (object == null) {
-            object = border.getMatteColor();
-        }
-        Object[] args = new Object[] {
-                insets.top,
-                insets.left,
-                insets.bottom,
-                insets.right,
-                object,
-        };
-        return new Expression(border, border.getClass(), "new", args);
-    }
-}
-
-/* XXX - doens't seem to work. Debug later.
-static final class javax_swing_JMenu_PersistenceDelegate extends DefaultPersistenceDelegate {
-    protected void initialize(Class<?> type, Object oldInstance, Object newInstance, Encoder out) {
-        super.initialize(type, oldInstance, newInstance, out);
-        javax.swing.JMenu m = (javax.swing.JMenu)oldInstance;
-        javax.swing.JMenu n = (javax.swing.JMenu)newInstance;
-        for (int i = n.getItemCount(); i < m.getItemCount(); i++) {
-            invokeStatement(oldInstance, "add", new Object[]{m.getItem(i)}, out);
-        }
-    }
-}
-*/
-
-/**
- * The persistence delegate for {@link PrintColorUIResource}.
- * It is impossible to use {@link DefaultPersistenceDelegate}
- * because this class has special rule for serialization:
- * it should be converted to {@link ColorUIResource}.
- *
- * @see PrintColorUIResource#writeReplace
- *
- * @author Sergey A. Malenkov
- */
-static final class sun_swing_PrintColorUIResource_PersistenceDelegate extends PersistenceDelegate {
-    protected boolean mutatesTo(Object oldInstance, Object newInstance) {
-        return oldInstance.equals(newInstance);
-    }
-
-    protected Expression instantiate(Object oldInstance, Encoder out) {
-        Color color = (Color) oldInstance;
-        Object[] args = new Object[] {color.getRGB()};
-        return new Expression(color, ColorUIResource.class, "new", args);
-    }
-}
-
     private static final Map<String,Field> fields = Collections.synchronizedMap(new WeakHashMap<String, Field>());
     private static Hashtable<String, PersistenceDelegate> internalPersistenceDelegates = new Hashtable<>();
 
@@ -1203,18 +606,6 @@ static final class sun_swing_PrintColorUIResource_PersistenceDelegate extends Pe
         internalPersistenceDelegates.put("java.net.URI",
                                          new PrimitivePersistenceDelegate());
 
-        // it is possible because MatteBorder is assignable from MatteBorderUIResource
-        internalPersistenceDelegates.put("javax.swing.plaf.BorderUIResource$MatteBorderUIResource",
-                                         new javax_swing_border_MatteBorder_PersistenceDelegate());
-
-        // it is possible because FontUIResource is supported by java_awt_Font_PersistenceDelegate
-        internalPersistenceDelegates.put("javax.swing.plaf.FontUIResource",
-                                         new java_awt_Font_PersistenceDelegate());
-
-        // it is possible because KeyStroke is supported by java_awt_AWTKeyStroke_PersistenceDelegate
-        internalPersistenceDelegates.put("javax.swing.KeyStroke",
-                                         new java_awt_AWTKeyStroke_PersistenceDelegate());
-
         internalPersistenceDelegates.put("java.sql.Date", new java_util_Date_PersistenceDelegate());
         internalPersistenceDelegates.put("java.sql.Time", new java_util_Date_PersistenceDelegate());
     }
diff --git a/src/java.desktop/share/classes/java/beans/MethodDescriptor.java b/src/java.beans/share/classes/java/beans/MethodDescriptor.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/MethodDescriptor.java
rename to src/java.beans/share/classes/java/beans/MethodDescriptor.java
diff --git a/src/java.desktop/share/classes/java/beans/MethodRef.java b/src/java.beans/share/classes/java/beans/MethodRef.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/MethodRef.java
rename to src/java.beans/share/classes/java/beans/MethodRef.java
diff --git a/src/java.desktop/share/classes/java/beans/NameGenerator.java b/src/java.beans/share/classes/java/beans/NameGenerator.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/NameGenerator.java
rename to src/java.beans/share/classes/java/beans/NameGenerator.java
diff --git a/src/java.desktop/share/classes/java/beans/ParameterDescriptor.java b/src/java.beans/share/classes/java/beans/ParameterDescriptor.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/ParameterDescriptor.java
rename to src/java.beans/share/classes/java/beans/ParameterDescriptor.java
diff --git a/src/java.desktop/share/classes/java/beans/PersistenceDelegate.java b/src/java.beans/share/classes/java/beans/PersistenceDelegate.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PersistenceDelegate.java
rename to src/java.beans/share/classes/java/beans/PersistenceDelegate.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyChangeEvent.java b/src/java.beans/share/classes/java/beans/PropertyChangeEvent.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyChangeEvent.java
rename to src/java.beans/share/classes/java/beans/PropertyChangeEvent.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyChangeListener.java b/src/java.beans/share/classes/java/beans/PropertyChangeListener.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyChangeListener.java
rename to src/java.beans/share/classes/java/beans/PropertyChangeListener.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyChangeListenerProxy.java b/src/java.beans/share/classes/java/beans/PropertyChangeListenerProxy.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyChangeListenerProxy.java
rename to src/java.beans/share/classes/java/beans/PropertyChangeListenerProxy.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyChangeSupport.java b/src/java.beans/share/classes/java/beans/PropertyChangeSupport.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyChangeSupport.java
rename to src/java.beans/share/classes/java/beans/PropertyChangeSupport.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyDescriptor.java b/src/java.beans/share/classes/java/beans/PropertyDescriptor.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyDescriptor.java
rename to src/java.beans/share/classes/java/beans/PropertyDescriptor.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyEditor.java b/src/java.beans/share/classes/java/beans/PropertyEditor.java
similarity index 83%
rename from src/java.desktop/share/classes/java/beans/PropertyEditor.java
rename to src/java.beans/share/classes/java/beans/PropertyEditor.java
index 95ee6e6f188..9f364ac7847 100644
--- a/src/java.desktop/share/classes/java/beans/PropertyEditor.java
+++ b/src/java.beans/share/classes/java/beans/PropertyEditor.java
@@ -88,23 +88,6 @@ public interface PropertyEditor {
 
     boolean isPaintable();
 
-    /**
-     * Paint a representation of the value into a given area of screen
-     * real estate.  Note that the propertyEditor is responsible for doing
-     * its own clipping so that it fits into the given rectangle.
-     * <p>
-     * If the PropertyEditor doesn't honor paint requests (see isPaintable)
-     * this method should be a silent noop.
-     * <p>
-     * The given Graphics object will have the default font, color, etc of
-     * the parent container.  The PropertyEditor may change graphics attributes
-     * such as font and color and doesn't need to restore the old values.
-     *
-     * @param gfx  Graphics object to paint into.
-     * @param box  Rectangle within graphics object into which we should paint.
-     */
-    void paintValue(java.awt.Graphics gfx, java.awt.Rectangle box);
-
     //----------------------------------------------------------------------
 
     /**
@@ -179,23 +162,6 @@ public interface PropertyEditor {
 
     //----------------------------------------------------------------------
 
-    /**
-     * A PropertyEditor may choose to make available a full custom Component
-     * that edits its property value.  It is the responsibility of the
-     * PropertyEditor to hook itself up to its editor Component itself and
-     * to report property value changes by firing a PropertyChange event.
-     * <P>
-     * The higher-level code that calls getCustomEditor may either embed
-     * the Component in some larger property sheet, or it may put it in
-     * its own individual dialog, or ...
-     *
-     * @return A java.awt.Component that will allow a human to directly
-     *      edit the current property value.  May be null if this is
-     *      not supported.
-     */
-
-    java.awt.Component getCustomEditor();
-
     /**
      * Determines whether this property editor supports a custom editor.
      *
diff --git a/src/java.desktop/share/classes/java/beans/PropertyEditorManager.java b/src/java.beans/share/classes/java/beans/PropertyEditorManager.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyEditorManager.java
rename to src/java.beans/share/classes/java/beans/PropertyEditorManager.java
diff --git a/src/java.desktop/share/classes/java/beans/PropertyEditorSupport.java b/src/java.beans/share/classes/java/beans/PropertyEditorSupport.java
similarity index 87%
rename from src/java.desktop/share/classes/java/beans/PropertyEditorSupport.java
rename to src/java.beans/share/classes/java/beans/PropertyEditorSupport.java
index abc93a0444f..66c0b57c1e7 100644
--- a/src/java.desktop/share/classes/java/beans/PropertyEditorSupport.java
+++ b/src/java.beans/share/classes/java/beans/PropertyEditorSupport.java
@@ -120,20 +120,6 @@ public class PropertyEditorSupport implements PropertyEditor {
         return false;
     }
 
-    /**
-     * Paint a representation of the value into a given area of screen
-     * real estate.  Note that the propertyEditor is responsible for doing
-     * its own clipping so that it fits into the given rectangle.
-     * <p>
-     * If the PropertyEditor doesn't honor paint requests (see isPaintable)
-     * this method should be a silent noop.
-     *
-     * @param gfx  Graphics object to paint into.
-     * @param box  Rectangle within graphics object into which we should paint.
-     */
-    public void paintValue(java.awt.Graphics gfx, java.awt.Rectangle box) {
-    }
-
     //----------------------------------------------------------------------
 
     /**
@@ -204,25 +190,6 @@ public class PropertyEditorSupport implements PropertyEditor {
 
     //----------------------------------------------------------------------
 
-    /**
-     * A PropertyEditor may chose to make available a full custom Component
-     * that edits its property value.  It is the responsibility of the
-     * PropertyEditor to hook itself up to its editor Component itself and
-     * to report property value changes by firing a PropertyChange event.
-     * <P>
-     * The higher-level code that calls getCustomEditor may either embed
-     * the Component in some larger property sheet, or it may put it in
-     * its own individual dialog, or ...
-     *
-     * @return A java.awt.Component that will allow a human to directly
-     *      edit the current property value.  May be null if this is
-     *      not supported.
-     */
-
-    public java.awt.Component getCustomEditor() {
-        return null;
-    }
-
     /**
      * Determines whether the propertyEditor can provide a custom editor.
      *
diff --git a/src/java.desktop/share/classes/java/beans/PropertyVetoException.java b/src/java.beans/share/classes/java/beans/PropertyVetoException.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/PropertyVetoException.java
rename to src/java.beans/share/classes/java/beans/PropertyVetoException.java
diff --git a/src/java.desktop/share/classes/java/beans/SimpleBeanInfo.java b/src/java.beans/share/classes/java/beans/SimpleBeanInfo.java
similarity index 48%
rename from src/java.desktop/share/classes/java/beans/SimpleBeanInfo.java
rename to src/java.beans/share/classes/java/beans/SimpleBeanInfo.java
index c4bda864ae2..3cc0847424d 100644
--- a/src/java.desktop/share/classes/java/beans/SimpleBeanInfo.java
+++ b/src/java.beans/share/classes/java/beans/SimpleBeanInfo.java
@@ -25,9 +25,6 @@
 
 package java.beans;
 
-import java.awt.Image;
-import java.awt.Toolkit;
-import java.awt.image.ImageProducer;
 import java.net.URL;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -114,90 +111,4 @@ public class SimpleBeanInfo implements BeanInfo {
     public BeanInfo[] getAdditionalBeanInfo() {
         return null;
     }
-
-    /**
-     * Claim there are no icons available.  You can override
-     * this if you want to provide icons for your bean.
-     */
-    @Override
-    public Image getIcon(final int iconKind) {
-        final BeanDescriptor descriptor = getBeanDescriptor();
-        if (descriptor != null) {
-            final Class<?> type = descriptor.getBeanClass();
-            if (type != null && type.getClassLoader() == null
-                    && type.getAnnotation(JavaBean.class) != null) {
-                final String name = type.getName();
-                final int index = name.lastIndexOf('.');
-                if (name.substring(0, index).equals("javax.swing")) {
-                    final String className = type.getSimpleName();
-                    switch (iconKind) {
-                        case ICON_COLOR_32x32:
-                            return loadImage(className, "Color32.gif");
-                        case ICON_COLOR_16x16:
-                            return loadImage(className, "Color16.gif");
-                        case ICON_MONO_32x32:
-                            return loadImage(className, "Mono32.gif");
-                        case ICON_MONO_16x16:
-                            return loadImage(className, "Mono16.gif");
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-    /**
-     * This is a utility method to help in loading standard icon images.
-     *
-     * @param  resourceName A pathname relative to the directory holding the
-     *         class file of the current class
-     * @return an image object. May be null if the load failed.
-     * @see java.beans.SimpleBeanInfo#loadImage(String)
-     */
-    @SuppressWarnings("removal")
-    private Image loadStandardImage(final String resourceName) {
-        return AccessController.doPrivileged(
-                (PrivilegedAction<Image>) () -> loadImage(resourceName));
-    }
-
-    /**
-     * This is a utility method to help in loading standard icon images.
-     *
-     * @param  resourceName A pathname relative to the directory holding the
-     *         class file of the current class
-     * @param  suffix A {@code String} containing a file suffix (<i>e.g.</i>,
-     *         "Color32.gif" or "Mono32.gif")
-     * @return an image object. May be null if the load failed.
-     * @see java.beans.SimpleBeanInfo#loadImage(String)
-     */
-    private Image loadImage(final String resourceName, final String suffix) {
-        final String prefix = "/javax/swing/beaninfo/images/";
-        final Image image = loadStandardImage(prefix + resourceName + suffix);
-        return image == null ? loadStandardImage(prefix + "JComponent" + suffix)
-                             : image;
-    }
-
-    /**
-     * This is a utility method to help in loading icon images. It takes the
-     * name of a resource file associated with the current object's class file
-     * and loads an image object from that file. Typically images will be GIFs.
-     *
-     * @param  resourceName A pathname relative to the directory holding the
-     *         class file of the current class. For example, "wombat.gif".
-     * @return an image object or null if the resource is not found or the
-     *         resource could not be loaded as an Image
-     */
-    public Image loadImage(final String resourceName) {
-        try {
-            final URL url = getClass().getResource(resourceName);
-            if (url != null) {
-                final ImageProducer ip = (ImageProducer) url.getContent();
-                if (ip != null) {
-                    return Toolkit.getDefaultToolkit().createImage(ip);
-                }
-            }
-        } catch (final Exception ignored) {
-        }
-        return null;
-    }
 }
diff --git a/src/java.desktop/share/classes/java/beans/Statement.java b/src/java.beans/share/classes/java/beans/Statement.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/Statement.java
rename to src/java.beans/share/classes/java/beans/Statement.java
diff --git a/src/java.desktop/share/classes/java/beans/ThreadGroupContext.java b/src/java.beans/share/classes/java/beans/ThreadGroupContext.java
similarity index 96%
rename from src/java.desktop/share/classes/java/beans/ThreadGroupContext.java
rename to src/java.beans/share/classes/java/beans/ThreadGroupContext.java
index b77154c9a3b..28c18f7a963 100644
--- a/src/java.desktop/share/classes/java/beans/ThreadGroupContext.java
+++ b/src/java.beans/share/classes/java/beans/ThreadGroupContext.java
@@ -28,14 +28,12 @@ package java.beans;
 import com.sun.beans.finder.BeanInfoFinder;
 import com.sun.beans.finder.PropertyEditorFinder;
 
-import java.awt.GraphicsEnvironment;
 import java.util.Map;
 import java.util.WeakHashMap;
 
 /**
  * The {@code ThreadGroupContext} is an application-dependent
  * context referenced by the specific {@link ThreadGroup}.
- * This is a replacement for the {@link sun.awt.AppContext}.
  *
  * @author  Sergey Malenkov
  */
@@ -80,7 +78,7 @@ final class ThreadGroupContext {
         Boolean isGuiAvailable = this.isGuiAvailable;
         return (isGuiAvailable != null)
                 ? isGuiAvailable.booleanValue()
-                : !GraphicsEnvironment.isHeadless();
+                : false;
     }
 
     void setGuiAvailable(boolean isGuiAvailable) {
diff --git a/src/java.desktop/share/classes/java/beans/Transient.java b/src/java.beans/share/classes/java/beans/Transient.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/Transient.java
rename to src/java.beans/share/classes/java/beans/Transient.java
diff --git a/src/java.desktop/share/classes/java/beans/VetoableChangeListener.java b/src/java.beans/share/classes/java/beans/VetoableChangeListener.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/VetoableChangeListener.java
rename to src/java.beans/share/classes/java/beans/VetoableChangeListener.java
diff --git a/src/java.desktop/share/classes/java/beans/VetoableChangeListenerProxy.java b/src/java.beans/share/classes/java/beans/VetoableChangeListenerProxy.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/VetoableChangeListenerProxy.java
rename to src/java.beans/share/classes/java/beans/VetoableChangeListenerProxy.java
diff --git a/src/java.desktop/share/classes/java/beans/VetoableChangeSupport.java b/src/java.beans/share/classes/java/beans/VetoableChangeSupport.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/VetoableChangeSupport.java
rename to src/java.beans/share/classes/java/beans/VetoableChangeSupport.java
diff --git a/src/java.desktop/share/classes/java/beans/Visibility.java b/src/java.beans/share/classes/java/beans/Visibility.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/Visibility.java
rename to src/java.beans/share/classes/java/beans/Visibility.java
diff --git a/src/java.desktop/share/classes/java/beans/WeakIdentityMap.java b/src/java.beans/share/classes/java/beans/WeakIdentityMap.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/WeakIdentityMap.java
rename to src/java.beans/share/classes/java/beans/WeakIdentityMap.java
diff --git a/src/java.desktop/share/classes/java/beans/XMLDecoder.java b/src/java.beans/share/classes/java/beans/XMLDecoder.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/XMLDecoder.java
rename to src/java.beans/share/classes/java/beans/XMLDecoder.java
diff --git a/src/java.desktop/share/classes/java/beans/XMLEncoder.java b/src/java.beans/share/classes/java/beans/XMLEncoder.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/XMLEncoder.java
rename to src/java.beans/share/classes/java/beans/XMLEncoder.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContext.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContext.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContext.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContext.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextChild.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextChild.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextChild.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextChild.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextChildSupport.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextChildSupport.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextChildSupport.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextChildSupport.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextEvent.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextEvent.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextEvent.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextEvent.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextMembershipEvent.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextMembershipEvent.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextMembershipEvent.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextMembershipEvent.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextMembershipListener.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextMembershipListener.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextMembershipListener.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextMembershipListener.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextProxy.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextProxy.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextProxy.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextProxy.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceAvailableEvent.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceAvailableEvent.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceAvailableEvent.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceAvailableEvent.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceProvider.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceProvider.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceProvider.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceProvider.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceProviderBeanInfo.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceProviderBeanInfo.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceProviderBeanInfo.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceProviderBeanInfo.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceRevokedEvent.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceRevokedEvent.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceRevokedEvent.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceRevokedEvent.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceRevokedListener.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceRevokedListener.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServiceRevokedListener.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServiceRevokedListener.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServices.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServices.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServices.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServices.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServicesListener.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServicesListener.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServicesListener.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServicesListener.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextServicesSupport.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextServicesSupport.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextServicesSupport.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextServicesSupport.java
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextSupport.java b/src/java.beans/share/classes/java/beans/beancontext/BeanContextSupport.java
similarity index 99%
rename from src/java.desktop/share/classes/java/beans/beancontext/BeanContextSupport.java
rename to src/java.beans/share/classes/java/beans/beancontext/BeanContextSupport.java
index 9989bec6381..f9f075c2fcb 100644
--- a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextSupport.java
+++ b/src/java.beans/share/classes/java/beans/beancontext/BeanContextSupport.java
@@ -25,8 +25,6 @@
 
 package java.beans.beancontext;
 
-import java.awt.Component;
-import java.awt.Container;
 import java.beans.Beans;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
@@ -765,9 +763,6 @@ public class      BeanContextSupport extends BeanContextChildSupport
 
         if (bc != this) {
             if (bc instanceof Visibility) return ((Visibility)bc).needsGui();
-
-            if (bc instanceof Container || bc instanceof Component)
-                return true;
         }
 
         synchronized(children) {
@@ -779,9 +774,6 @@ public class      BeanContextSupport extends BeanContextChildSupport
                     } catch (ClassCastException cce) {
                         // do nothing ...
                     }
-
-                    if (c instanceof Container || c instanceof Component)
-                        return true;
             }
         }
 
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/package-info.java b/src/java.beans/share/classes/java/beans/beancontext/package-info.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/beancontext/package-info.java
rename to src/java.beans/share/classes/java/beans/beancontext/package-info.java
diff --git a/src/java.desktop/share/classes/java/beans/package-info.java b/src/java.beans/share/classes/java/beans/package-info.java
similarity index 100%
rename from src/java.desktop/share/classes/java/beans/package-info.java
rename to src/java.beans/share/classes/java/beans/package-info.java
diff --git a/src/java.beans/share/classes/module-info.java b/src/java.beans/share/classes/module-info.java
new file mode 100644
index 00000000000..e27b541753d
--- /dev/null
+++ b/src/java.beans/share/classes/module-info.java
@@ -0,0 +1,13 @@
+/**
+ * Defines the JavaBeans.
+ * <p>
+ *
+ * @moduleGraph
+ * @since 9
+ */
+module java.beans {
+    requires transitive java.xml;
+
+    exports java.beans;
+    exports java.beans.beancontext;
+}
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/ColorEditor.java b/src/java.desktop/share/classes/com/sun/beans/editors/ColorEditor.java
deleted file mode 100644
index 2fd55bc1b67..00000000000
--- a/src/java.desktop/share/classes/com/sun/beans/editors/ColorEditor.java
+++ /dev/null
@@ -1,232 +0,0 @@
-/*
- * Copyright (c) 1996, 2021, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package com.sun.beans.editors;
-
-import java.awt.Canvas;
-import java.awt.Choice;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Event;
-import java.awt.Panel;
-import java.awt.TextField;
-import java.beans.PropertyChangeListener;
-import java.beans.PropertyChangeSupport;
-import java.beans.PropertyEditor;
-import java.io.Serial;
-
-public class ColorEditor extends Panel implements PropertyEditor {
-
-    /**
-     * Use serialVersionUID from JDK 1.7 for interoperability.
-     */
-    @Serial
-    private static final long serialVersionUID = 1781257185164716054L;
-
-    @SuppressWarnings("deprecation")
-    public ColorEditor() {
-        setLayout(null);
-
-        ourWidth = hPad;
-
-        // Create a sample color block bordered in black
-        Panel p = new Panel();
-        p.setLayout(null);
-        p.setBackground(Color.black);
-        sample = new Canvas();
-        p.add(sample);
-        sample.reshape(2, 2, sampleWidth, sampleHeight);
-        add(p);
-        p.reshape(ourWidth, 2, sampleWidth+4, sampleHeight+4);
-        ourWidth += sampleWidth + 4 + hPad;
-
-        text = new TextField("", 14);
-        add(text);
-        text.reshape(ourWidth,0,100,30);
-        ourWidth += 100 + hPad;
-
-        choser = new Choice();
-        int active = 0;
-        for (int i = 0; i < colorNames.length; i++) {
-            choser.addItem(colorNames[i]);
-        }
-        add(choser);
-        choser.reshape(ourWidth,0,100,30);
-        ourWidth += 100 + hPad;
-
-        resize(ourWidth,40);
-    }
-
-    public void setValue(Object o) {
-        Color c = (Color)o;
-        changeColor(c);
-    }
-
-    @SuppressWarnings("deprecation")
-    public Dimension preferredSize() {
-        return new Dimension(ourWidth, 40);
-    }
-
-    @SuppressWarnings("deprecation")
-    public boolean keyUp(Event e, int key) {
-        if (e.target == text) {
-            try {
-                setAsText(text.getText());
-            } catch (IllegalArgumentException ex) {
-                // Quietly ignore.
-            }
-        }
-        return (false);
-    }
-
-    public void setAsText(String s) throws java.lang.IllegalArgumentException {
-        if (s == null) {
-            changeColor(null);
-            return;
-        }
-        int c1 = s.indexOf(',');
-        int c2 = s.indexOf(',', c1+1);
-        if (c1 < 0 || c2 < 0) {
-            // Invalid string.
-            throw new IllegalArgumentException(s);
-        }
-        try {
-            int r = Integer.parseInt(s.substring(0,c1));
-            int g = Integer.parseInt(s.substring(c1+1, c2));
-            int b = Integer.parseInt(s.substring(c2+1));
-            Color c = new Color(r,g,b);
-            changeColor(c);
-        } catch (Exception ex) {
-            throw new IllegalArgumentException(s);
-        }
-
-    }
-
-    @SuppressWarnings("deprecation")
-    public boolean action(Event e, Object arg) {
-        if (e.target == choser) {
-            changeColor(colors[choser.getSelectedIndex()]);
-        }
-        return false;
-    }
-
-    public String getJavaInitializationString() {
-        return (this.color != null)
-                ? "new java.awt.Color(" + this.color.getRGB() + ",true)"
-                : "null";
-    }
-
-
-    private void changeColor(Color c) {
-
-        if (c == null) {
-            this.color = null;
-            this.text.setText("");
-            return;
-        }
-
-        color = c;
-
-        text.setText("" + c.getRed() + "," + c.getGreen() + "," + c.getBlue());
-
-        int active = 0;
-        for (int i = 0; i < colorNames.length; i++) {
-            if (color.equals(colors[i])) {
-                active = i;
-            }
-        }
-        choser.select(active);
-
-        sample.setBackground(color);
-        sample.repaint();
-
-        support.firePropertyChange("", null, null);
-    }
-
-    public Object getValue() {
-        return color;
-    }
-
-    public boolean isPaintable() {
-        return true;
-    }
-
-    public void paintValue(java.awt.Graphics gfx, java.awt.Rectangle box) {
-        Color oldColor = gfx.getColor();
-        gfx.setColor(Color.black);
-        gfx.drawRect(box.x, box.y, box.width-3, box.height-3);
-        gfx.setColor(color);
-        gfx.fillRect(box.x+1, box.y+1, box.width-4, box.height-4);
-        gfx.setColor(oldColor);
-    }
-
-    public String getAsText() {
-        return (this.color != null)
-                ? this.color.getRed() + "," + this.color.getGreen() + "," + this.color.getBlue()
-                : null;
-    }
-
-    public String[] getTags() {
-        return null;
-    }
-
-    public java.awt.Component getCustomEditor() {
-        return this;
-    }
-
-    public boolean supportsCustomEditor() {
-        return true;
-    }
-
-    public void addPropertyChangeListener(PropertyChangeListener l) {
-        support.addPropertyChangeListener(l);
-    }
-
-    public void removePropertyChangeListener(PropertyChangeListener l) {
-        support.removePropertyChangeListener(l);
-    }
-
-
-    private String[] colorNames = { " ", "white", "lightGray", "gray", "darkGray",
-                        "black", "red", "pink", "orange",
-                        "yellow", "green", "magenta", "cyan",
-                        "blue"};
-    private Color[] colors = { null, Color.white, Color.lightGray, Color.gray, Color.darkGray,
-                        Color.black, Color.red, Color.pink, Color.orange,
-                        Color.yellow, Color.green, Color.magenta, Color.cyan,
-                        Color.blue};
-
-    private Canvas sample;
-    private int sampleHeight = 20;
-    private int sampleWidth = 40;
-    private int hPad = 5;
-    private int ourWidth;
-
-    private Color color;
-    private TextField text;
-    private Choice choser;
-
-    private PropertyChangeSupport support = new PropertyChangeSupport(this);
-}
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/EnumEditor.java b/src/java.desktop/share/classes/com/sun/beans/editors/EnumEditor.java
deleted file mode 100644
index b7f5ada0d1f..00000000000
--- a/src/java.desktop/share/classes/com/sun/beans/editors/EnumEditor.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (c) 2006, 2014, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package com.sun.beans.editors;
-
-import java.awt.Component;
-import java.awt.Graphics;
-import java.awt.Rectangle;
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
-import java.beans.PropertyEditor;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Property editor for java.lang.Enum subclasses.
- *
- * @see PropertyEditor
- *
- * @since 1.7
- *
- * @author Sergey A. Malenkov
- */
-public final class EnumEditor implements PropertyEditor {
-    private final List<PropertyChangeListener> listeners = new ArrayList<PropertyChangeListener>();
-
-    @SuppressWarnings("rawtypes")
-    private final Class<? extends Enum> type;
-    private final String[] tags;
-
-    private Object value;
-
-    public EnumEditor(Class<?> type) {
-        Object[] values = type.getEnumConstants();
-        if ( values == null ) {
-            throw new IllegalArgumentException( "Unsupported " + type );
-        }
-        this.type = type.asSubclass(java.lang.Enum.class);
-        this.tags = new String[values.length];
-        for ( int i = 0; i < values.length; i++ ) {
-            this.tags[i] = ( ( Enum )values[i] ).name();
-        }
-    }
-
-    public Object getValue() {
-        return this.value;
-    }
-
-    public void setValue( Object value ) {
-        if ( ( value != null ) && !this.type.isInstance( value ) ) {
-            throw new IllegalArgumentException( "Unsupported value: " + value );
-        }
-        Object oldValue;
-        PropertyChangeListener[] listeners;
-        synchronized ( this.listeners ) {
-            oldValue = this.value;
-            this.value = value;
-
-            if ( ( value == null ) ? oldValue == null : value.equals( oldValue ) ) {
-                return; // do not fire event if value is not changed
-            }
-            int size = this.listeners.size();
-            if ( size == 0 ) {
-                return; // do not fire event if there are no any listener
-            }
-            listeners = this.listeners.toArray( new PropertyChangeListener[size] );
-        }
-        PropertyChangeEvent event = new PropertyChangeEvent( this, null, oldValue, value );
-        for ( PropertyChangeListener listener : listeners ) {
-            listener.propertyChange( event );
-        }
-    }
-
-    public String getAsText() {
-        return ( this.value != null )
-                ? ( ( Enum )this.value ).name()
-                : null;
-    }
-
-    public void setAsText( String text ) {
-        @SuppressWarnings("unchecked")
-        Object tmp = ( text != null )
-            ? Enum.valueOf( (Class)this.type, text )
-            : null;
-        setValue(tmp);
-    }
-
-    public String[] getTags() {
-        return this.tags.clone();
-    }
-
-    public String getJavaInitializationString() {
-        String name = getAsText();
-        return ( name != null )
-                ? this.type.getName() + '.' + name
-                : "null";
-    }
-
-    public boolean isPaintable() {
-        return false;
-    }
-
-    public void paintValue( Graphics gfx, Rectangle box ) {
-    }
-
-    public boolean supportsCustomEditor() {
-        return false;
-    }
-
-    public Component getCustomEditor() {
-        return null;
-    }
-
-    public void addPropertyChangeListener( PropertyChangeListener listener ) {
-        synchronized ( this.listeners ) {
-            this.listeners.add( listener );
-        }
-    }
-
-    public void removePropertyChangeListener( PropertyChangeListener listener ) {
-        synchronized ( this.listeners ) {
-            this.listeners.remove( listener );
-        }
-    }
-}
diff --git a/src/java.desktop/share/classes/com/sun/beans/editors/FontEditor.java b/src/java.desktop/share/classes/com/sun/beans/editors/FontEditor.java
deleted file mode 100644
index ae711c0103a..00000000000
--- a/src/java.desktop/share/classes/com/sun/beans/editors/FontEditor.java
+++ /dev/null
@@ -1,238 +0,0 @@
-/*
- * Copyright (c) 1996, 2021, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package com.sun.beans.editors;
-
-import java.awt.Choice;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.Event;
-import java.awt.Font;
-import java.awt.FontMetrics;
-import java.awt.Label;
-import java.awt.Panel;
-import java.awt.Toolkit;
-import java.beans.PropertyChangeListener;
-import java.beans.PropertyChangeSupport;
-import java.io.Serial;
-
-public class FontEditor extends Panel implements java.beans.PropertyEditor {
-
-    /**
-     * Use serialVersionUID from JDK 1.7 for interoperability.
-     */
-    @Serial
-    private static final long serialVersionUID = 6732704486002715933L;
-
-    @SuppressWarnings("deprecation")
-    public FontEditor() {
-        setLayout(null);
-
-        toolkit = Toolkit.getDefaultToolkit();
-        fonts = toolkit.getFontList();
-
-        familyChoser = new Choice();
-        for (int i = 0; i < fonts.length; i++) {
-            familyChoser.addItem(fonts[i]);
-        }
-        add(familyChoser);
-        familyChoser.reshape(20, 5, 100, 30);
-
-        styleChoser = new Choice();
-        for (int i = 0; i < styleNames.length; i++) {
-            styleChoser.addItem(styleNames[i]);
-        }
-        add(styleChoser);
-        styleChoser.reshape(145, 5, 70, 30);
-
-        sizeChoser = new Choice();
-        for (int i = 0; i < pointSizes.length; i++) {
-            sizeChoser.addItem("" + pointSizes[i]);
-        }
-        add(sizeChoser);
-        sizeChoser.reshape(220, 5, 70, 30);
-
-        resize(300,40);
-    }
-
-
-    @SuppressWarnings("deprecation")
-    public Dimension preferredSize() {
-        return new Dimension(300, 40);
-    }
-
-    public void setValue(Object o) {
-        font = (Font) o;
-        if (this.font == null)
-            return;
-
-        changeFont(font);
-        // Update the current GUI choices.
-        for (int i = 0; i < fonts.length; i++) {
-            if (fonts[i].equals(font.getFamily())) {
-                familyChoser.select(i);
-                break;
-            }
-        }
-        for (int i = 0; i < styleNames.length; i++) {
-            if (font.getStyle() == styles[i]) {
-                styleChoser.select(i);
-                break;
-            }
-        }
-        for (int i = 0; i < pointSizes.length; i++) {
-            if (font.getSize() <= pointSizes[i]) {
-                sizeChoser.select(i);
-                break;
-            }
-        }
-    }
-
-    @SuppressWarnings("deprecation")
-    private void changeFont(Font f) {
-        font = f;
-        if (sample != null) {
-            remove(sample);
-        }
-        sample = new Label(sampleText);
-        sample.setFont(font);
-        add(sample);
-        Component p = getParent();
-        if (p != null) {
-            p.invalidate();
-            p.layout();
-        }
-        invalidate();
-        layout();
-        repaint();
-        support.firePropertyChange("", null, null);
-    }
-
-    public Object getValue() {
-        return (font);
-    }
-
-    public String getJavaInitializationString() {
-        if (this.font == null)
-            return "null";
-
-        return "new java.awt.Font(\"" + font.getName() + "\", " +
-                   font.getStyle() + ", " + font.getSize() + ")";
-    }
-
-    @SuppressWarnings("deprecation")
-    public boolean action(Event e, Object arg) {
-        String family = familyChoser.getSelectedItem();
-        int style = styles[styleChoser.getSelectedIndex()];
-        int size = pointSizes[sizeChoser.getSelectedIndex()];
-        try {
-            Font f = new Font(family, style, size);
-            changeFont(f);
-        } catch (Exception ex) {
-            System.err.println("Couldn't create font " + family + "-" +
-                        styleNames[style] + "-" + size);
-        }
-        return (false);
-    }
-
-
-    public boolean isPaintable() {
-        return true;
-    }
-
-    public void paintValue(java.awt.Graphics gfx, java.awt.Rectangle box) {
-        // Silent noop.
-        Font oldFont = gfx.getFont();
-        gfx.setFont(font);
-        FontMetrics fm = gfx.getFontMetrics();
-        int vpad = (box.height - fm.getAscent())/2;
-        gfx.drawString(sampleText, 0, box.height-vpad);
-        gfx.setFont(oldFont);
-    }
-
-    public String getAsText() {
-        if (this.font == null) {
-            return null;
-        }
-        StringBuilder sb = new StringBuilder();
-        sb.append(this.font.getName());
-        sb.append(' ');
-
-        boolean b = this.font.isBold();
-        if (b) {
-            sb.append("BOLD");
-        }
-        boolean i = this.font.isItalic();
-        if (i) {
-            sb.append("ITALIC");
-        }
-        if (b || i) {
-            sb.append(' ');
-        }
-        sb.append(this.font.getSize());
-        return sb.toString();
-    }
-
-    public void setAsText(String text) throws IllegalArgumentException {
-        setValue((text == null) ? null : Font.decode(text));
-    }
-
-    public String[] getTags() {
-        return null;
-    }
-
-    public java.awt.Component getCustomEditor() {
-        return this;
-    }
-
-    public boolean supportsCustomEditor() {
-        return true;
-    }
-
-    public void addPropertyChangeListener(PropertyChangeListener l) {
-        support.addPropertyChangeListener(l);
-    }
-
-    public void removePropertyChangeListener(PropertyChangeListener l) {
-        support.removePropertyChangeListener(l);
-    }
-
-    private Font font;
-    private Toolkit toolkit;
-    private String sampleText = "Abcde...";
-
-    private Label sample;
-    private Choice familyChoser;
-    private Choice styleChoser;
-    private Choice sizeChoser;
-
-    private String[] fonts;
-    private String[] styleNames = { "plain", "bold", "italic" };
-    private int[] styles = { Font.PLAIN, Font.BOLD, Font.ITALIC };
-    private int[] pointSizes = { 3, 5, 8, 10, 12, 14, 18, 24, 36, 48 };
-
-    private PropertyChangeSupport support = new PropertyChangeSupport(this);
-
-}
diff --git a/src/java.desktop/share/classes/com/sun/beans/infos/ComponentBeanInfo.java b/src/java.desktop/share/classes/com/sun/beans/infos/ComponentBeanInfo.java
deleted file mode 100644
index 1514b005074..00000000000
--- a/src/java.desktop/share/classes/com/sun/beans/infos/ComponentBeanInfo.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package com.sun.beans.infos;
-
-import java.beans.*;
-
-/**
- * BeanInfo descriptor for a standard AWT component.
- */
-
-public class ComponentBeanInfo extends SimpleBeanInfo {
-    private static final Class<java.awt.Component> beanClass = java.awt.Component.class;
-
-    public PropertyDescriptor[] getPropertyDescriptors() {
-        try {
-            PropertyDescriptor
-                      name = new PropertyDescriptor("name",       beanClass),
-                background = new PropertyDescriptor("background", beanClass),
-                foreground = new PropertyDescriptor("foreground", beanClass),
-                      font = new PropertyDescriptor("font",       beanClass),
-                   enabled = new PropertyDescriptor("enabled",    beanClass),
-                   visible = new PropertyDescriptor("visible",    beanClass),
-                 focusable = new PropertyDescriptor("focusable",  beanClass);
-
-            enabled.setExpert(true);
-            visible.setHidden(true);
-
-            background.setBound(true);
-            foreground.setBound(true);
-            font.setBound(true);
-            focusable.setBound(true);
-
-            PropertyDescriptor[] rv = {name, background, foreground, font, enabled, visible, focusable };
-            return rv;
-        } catch (IntrospectionException e) {
-            throw new Error(e.toString());
-        }
-    }
-}
diff --git a/src/java.desktop/share/classes/java/beans/AppletInitializer.java b/src/java.desktop/share/classes/java/beans/AppletInitializer.java
deleted file mode 100644
index 36f89836c28..00000000000
--- a/src/java.desktop/share/classes/java/beans/AppletInitializer.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (c) 1997, 2021, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package java.beans;
-
-import java.applet.Applet;
-
-import java.beans.beancontext.BeanContext;
-
-/**
- * This interface is designed to work in collusion with java.beans.Beans.instantiate.
- * The interface is intended to provide mechanism to allow the proper
- * initialization of JavaBeans that are also Applets, during their
- * instantiation by java.beans.Beans.instantiate().
- *
- * @see java.beans.Beans#instantiate
- *
- * @since 1.2
- *
- * @deprecated The Applet API is deprecated. See the
- * <a href="../applet/package-summary.html"> java.applet package
- * documentation</a> for further information.
- */
-@Deprecated(since = "9", forRemoval = true)
-public interface AppletInitializer {
-
-    /**
-     * <p>
-     * If passed to the appropriate variant of java.beans.Beans.instantiate
-     * this method will be called in order to associate the newly instantiated
-     * Applet (JavaBean) with its AppletContext, AppletStub, and Container.
-     * </p>
-     * <p>
-     * Conformant implementations shall:
-     * <ol>
-     * <li> Associate the newly instantiated Applet with the appropriate
-     * AppletContext.
-     *
-     * <li> Instantiate an AppletStub() and associate that AppletStub with
-     * the Applet via an invocation of setStub().
-     *
-     * <li> If BeanContext parameter is null, then it shall associate the
-     * Applet with its appropriate Container by adding that Applet to its
-     * Container via an invocation of add(). If the BeanContext parameter is
-     * non-null, then it is the responsibility of the BeanContext to associate
-     * the Applet with its Container during the subsequent invocation of its
-     * addChildren() method.
-     * </ol>
-     *
-     * @param newAppletBean  The newly instantiated JavaBean
-     * @param bCtxt          The BeanContext intended for this Applet, or
-     *                       null.
-     */
-    @SuppressWarnings("removal")
-    void initialize(Applet newAppletBean, BeanContext bCtxt);
-
-    /**
-     * <p>
-     * Activate, and/or mark Applet active. Implementors of this interface
-     * shall mark this Applet as active, and optionally invoke its start()
-     * method.
-     * </p>
-     *
-     * @param newApplet  The newly instantiated JavaBean
-     */
-    @SuppressWarnings("removal")
-    void activate(Applet newApplet);
-}
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextChildComponentProxy.java b/src/java.desktop/share/classes/java/beans/beancontext/BeanContextChildComponentProxy.java
deleted file mode 100644
index 8bab7514908..00000000000
--- a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextChildComponentProxy.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (c) 1998, 2002, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package java.beans.beancontext;
-
-import java.awt.Component;
-
-/**
- * <p>
- * This interface is implemented by
- * {@code BeanContextChildren} that have an AWT {@code Component}
- * associated with them.
- * </p>
- *
- * @author Laurence P. G. Cable
- * @since 1.2
- *
- * @see java.beans.beancontext.BeanContext
- * @see java.beans.beancontext.BeanContextSupport
- */
-
-public interface BeanContextChildComponentProxy {
-
-    /**
-     * Gets the {@code java.awt.Component} associated with
-     * this {@code BeanContextChild}.
-     * @return the AWT {@code Component} associated with
-     * this {@code BeanContextChild}
-     */
-
-    Component getComponent();
-}
diff --git a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextContainerProxy.java b/src/java.desktop/share/classes/java/beans/beancontext/BeanContextContainerProxy.java
deleted file mode 100644
index 3934d0afadd..00000000000
--- a/src/java.desktop/share/classes/java/beans/beancontext/BeanContextContainerProxy.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (c) 1998, 2002, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package java.beans.beancontext;
-
-import java.awt.Container;
-
-/**
- * <p>
- * This interface is implemented by BeanContexts' that have an AWT Container
- * associated with them.
- * </p>
- *
- * @author Laurence P. G. Cable
- * @since 1.2
- *
- * @see java.beans.beancontext.BeanContext
- * @see java.beans.beancontext.BeanContextSupport
- */
-
-public interface BeanContextContainerProxy {
-
-    /**
-     * Gets the {@code java.awt.Container} associated
-     * with this {@code BeanContext}.
-     * @return the {@code java.awt.Container} associated
-     * with this {@code BeanContext}.
-     */
-    Container getContainer();
-}
diff --git a/src/java.se/share/classes/module-info.java b/src/java.se/share/classes/module-info.java
index f53136b0c20..7a7e95feae8 100644
--- a/src/java.se/share/classes/module-info.java
+++ b/src/java.se/share/classes/module-info.java
@@ -41,6 +41,7 @@
 module java.se {
     requires transitive java.compiler;
     requires transitive java.datatransfer;
+    requires transitive java.beans;
     requires transitive java.instrument;
     requires transitive java.logging;
     requires transitive java.management;
-- 
2.37.3

